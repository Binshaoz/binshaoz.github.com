<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>十三的个人博客</title>
  
  <subtitle>我不在彩虹，彩虹在我.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Binshao.site/"/>
  <updated>2018-09-17T02:55:10.741Z</updated>
  <id>http://Binshao.site/</id>
  
  <author>
    <name>十三</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习路上的一些感悟</title>
    <link href="http://Binshao.site/2018/09/17/StudyWay/"/>
    <id>http://Binshao.site/2018/09/17/StudyWay/</id>
    <published>2018-09-17T02:11:44.000Z</published>
    <updated>2018-09-17T02:55:10.741Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，大家好！再过三天就是五一了，想好去哪浪了没？今天分享学习路上的一些感悟，一首李荣浩的 《老街》 送给大家。</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=133998&auto=1&height=66"></iframe><!-- moe --><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvcbcxn4gjj30u00k0n41.jpg" alt=""></div></p><p><div align="center" style="font-size: 13px; color: gray">Photo by qjk6538 from Polayoutu</div></p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>&emsp;&emsp;最近听到有同学抱怨寝室环境不好，加上平时上课觉得老师讲的知识没什么用，还不如自己去自学，上课纯属浪费时间，我认为这是不妥的，在校学习的知识都是基础，我们都知道万丈大楼都是从地基垒起，万变不离其宗，只有打下扎实的基础才能走的更远，虽然基础学习过于枯燥，但不可放弃啊。<br><br></p><h2 id="PotPlayer"><a href="#PotPlayer" class="headerlink" title="PotPlayer"></a>PotPlayer</h2><p>&emsp;&emsp;PotPlayer 是个播放器，它有多强大就不做过多介绍了，最好用就是它的倍速播放，效率提高的可不是一点半点，当然播速是在你能接受范围内，不要只是一味追求速度。不管是看视频也好，看书也罢，每个人都应该有自己的一套学习体系，适合自己的才是最好的，最后，编程是个手艺活，要动手实践，牛逼的奥义在于重复，与大家共勉。<br><br></p><h2 id="做你想做的事"><a href="#做你想做的事" class="headerlink" title="做你想做的事"></a>做你想做的事</h2><p>&emsp;&emsp;难道除了学习就是学习了吗？当然不是，毕竟生活丰富多彩，特别是校园生活，不要为了学习而学习，拒绝“苦行僧”式学习，那样子和机器有什么区别？运动、读书都是值得我们付出时间去做的，我从小就喜欢打乒乓球，坐在电脑前久了就去打上几球，同时我还喜欢旅游，虽然穷逼一个，最想去大理了，觉得那里风景好美。<br><br></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&emsp;&emsp;珍惜现在的校园时光，时间过得真快，或许这是人生中最后一次的校园生活，记录下这些感悟，也许在以后的某天翻见会一笑带过。<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Hi，大家好！再过三天就是五一了，想好去哪浪了没？今天分享学习路上的一些感悟，一首李荣浩的 《老街》 送给大家。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;
      
    
    </summary>
    
      <category term="时光任意门" scheme="http://Binshao.site/categories/%E6%97%B6%E5%85%89%E4%BB%BB%E6%84%8F%E9%97%A8/"/>
    
    
      <category term="学习路上" scheme="http://Binshao.site/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E4%B8%8A/"/>
    
  </entry>
  
  <entry>
    <title>扎心的八月</title>
    <link href="http://Binshao.site/2018/08/30/Aug/"/>
    <id>http://Binshao.site/2018/08/30/Aug/</id>
    <published>2018-08-30T01:29:02.000Z</published>
    <updated>2018-09-16T14:34:27.735Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，我是十三，人生中最后一个暑假假期就剩下两天了，余额严重不足感……  </p></blockquote><p>&emsp;&emsp;好些天没来记录了，这段时间都用来养病去了，以至于感觉过的没那么充实却又觉意义深远，今天家这边大雨倾盆，竟然有些凉意。</p><a id="more"></a><p><div align="center"><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fvbq1oxu6sj30p00irwm1.jpg" alt=""></div></p><h2 id="糟糕的八月"><a href="#糟糕的八月" class="headerlink" title="糟糕的八月"></a>糟糕的八月</h2><p>&emsp;&emsp;假期这段时间以来，大多数时间就在电脑前敲代码、查阅技术书籍，记录学习过程并总结成文，就这样一天过一天，时间如流水，转眼就来到月，也不知道是哪天感觉双眼发烫，眨眼间有种胀痛感，镜子前一看双眼充红，这一下给吓得不行，赶紧找大夫去…</p><p>&emsp;&emsp;接下来这段时间自然便是与药片相伴的日子，因用眼过度导致眼疲劳，一不小心病毒就入侵了，病毒侵占成功并大肆举起红旗，颇有得意之感。双眼看起来就像杀红了眼…每隔 2 小时就得滴眼药水，这种状态一直持续了好久，还记得养病期间和老友们去影院看电影，全程都在闭着眼睛没怎么看电影，过后还被批评不走心（你看我一脸委屈脸，哭），现在想想还觉得挺好笑，哈哈！<br><br></p><h2 id="用眼指南"><a href="#用眼指南" class="headerlink" title="用眼指南"></a>用眼指南</h2><p>&emsp;&emsp;既然出了问题就要找出问题所在，我回顾了下，长期坐在电脑跟前不动这算其一，放松娱乐就是下意识拿起手机，真当身体是刀枪不入？这样子下来眼睛肯定受不了，是该学点养生知识了：  </p><ul><li>泡点菊花枸杞茶喝喝.  </li><li>使用电脑每隔 <code>四五十</code> 分钟起身走走，让眼睛眺望远处放松放松.</li><li>有意识地增加眨眼次数.</li><li>做做眼保健操.</li><li>保证充足的睡眠.</li><li>真的要加强锻炼身体.</li></ul><p>&emsp;&emsp;是不是俨然一副手拿保温杯养生老干部的样子，高手在民间，呵…</p><p>&emsp;&emsp;经过这段时间的休息，眼睛也恢复的差不多了，然而我的假期就快要结束了，没有想到会这样度过这最后一个暑假期，我想这还真是让人印象深刻阿！吃一垫，长一智！这看似糟糕的八月，却敲响了警钟，我们始终认为自己还年轻，可事实却告诉我们这是在玩火！</p><p>&emsp;&emsp;最后希望大家都有一个强壮健康的身体！<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，我是十三，人生中最后一个暑假假期就剩下两天了，余额严重不足感……  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;好些天没来记录了，这段时间都用来养病去了，以至于感觉过的没那么充实却又觉意义深远，今天家这边大雨倾盆，竟然有些凉意。&lt;/p&gt;
    
    </summary>
    
      <category term="时光任意门" scheme="http://Binshao.site/categories/%E6%97%B6%E5%85%89%E4%BB%BB%E6%84%8F%E9%97%A8/"/>
    
    
      <category term="生活杂谈" scheme="http://Binshao.site/tags/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
      <category term="健康" scheme="http://Binshao.site/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>Activity 基础总结</title>
    <link href="http://Binshao.site/2018/03/13/Activity/"/>
    <id>http://Binshao.site/2018/03/13/Activity/</id>
    <published>2018-03-13T01:39:18.000Z</published>
    <updated>2018-09-17T02:04:02.355Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hello，大家好！今天周一，大家鼓足干劲就是干，反手就是一巴掌（哈哈）。</p></blockquote><p>&emsp;&emsp;这篇文章是关于 Activity 的一些总结（小白文，莫喷)，其中部分是刚哥《艺术探索》的读书笔记，Activity 作为四大金刚中出现频率最高的组件，我们可以在各个地方都可以见到它。总结过程中也借此好好回顾下，分享给大家，当然也希望各位大牛能不吝赐教。</p><a id="more"></a><p><div align="center"><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fvcamdvj9wj30zk0nq488.jpg" alt=""></div></p><p><div align="center" style="font-size: 13px; color: gray;">Photo by lwowomeme from polaxiong</div></p><h2 id="Activity-的四种状态"><a href="#Activity-的四种状态" class="headerlink" title="Activity 的四种状态"></a>Activity 的四种状态</h2><p>&emsp;&emsp;关于什么是 Activity 的概念我就不介绍了，都烂大街了。Activity 有多种状态，它可以在这几种状态之间切换，并以此影响着 Activity 的生命周期。</p><ul><li><p>Running：<br>  表明 Activity 处于活动状态，用户可以点击屏幕并作出响应，这时候处于 Activity 栈顶。</p></li><li><p>Paused：<br>  表明 Activity 失去焦点或被非全屏 Activity 覆盖，失去和用户交互的能力，在内存不紧张情况下，所有状态信息都还会存在。</p></li><li><p>stopped：<br>  被其他 Activity 完全覆盖，不再是可见的，状态信息同上。</p></li><li><p>Killed:<br>  Activity 已经被系统回收且所有状态信息不存在。<br>  从上面我们可以看出，用户者不同的操作行为会让 Activity 在不同的状态间切换，接下来我们来看看它的生命周期。</p></li></ul><p><br></p><h2 id="Activity-的生命周期"><a href="#Activity-的生命周期" class="headerlink" title="Activity 的生命周期"></a>Activity 的生命周期</h2><p>&emsp;&emsp;先来张经典的官方 Activity 生命周期图：</p><p><div align="center"><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fvcat0b0ryj30e90ift9a.jpg" alt=""></div></p><p><div align="center" style="font-size: 13px; color: gray;">Activity 生命周期</div></p><p>&emsp;&emsp;我们来回顾下上面的方法，看看自己还记得多少（偷笑）：</p><ul><li><p>onCreate()<br>  这是生命周期的第一个方法，此时 Activity 正在创建，一般我们会做一些初始化工作，如加载界面、初始化数据等。</p></li><li><p>onStart()<br>  此时 Activity 正在启动，这时的 Activity 已经可见，可是还没有出现在前台，也就无法和用户进行交互。</p></li><li><p>onResume()<br>  这时候的 Activity 已经可见了且是出现在前台了，<code>注意：和 onStart()相比，onResume()的时候，Activity 已经显示在前台了。</code></p></li><li><p>onPause()<br>  此时的 Activity 正在停止，然后 onStop()就会被调用，一般我们可以做些存储数据等操作，<code>但是这里要注意，不可以做太过耗时操作。</code></p></li><li><p>onStop()<br>  此时的 Activity 即将停止。</p></li><li><p>onRestart()<br>  此时 Activity 正在重新启动，假如 Activity 从不可见重新变为可见的时候，这个方法就会被调用，如打开一个新的页面然后又返回当前 Activity。</p></li><li><p>onDestroy()<br>  这是生命周期最后一个回调方法，此时的 Activity 即将销毁，通常我们会做写资源释放等操作。</p></li></ul><p><br></p><h2 id="生命周期的分析"><a href="#生命周期的分析" class="headerlink" title="生命周期的分析"></a>生命周期的分析</h2><ul><li><p>Activity 启动：onCreate() -&gt; onStart() -&gt; onResume()</p></li><li><p>Home 键返回主界面或被覆盖(Activity 不可见)：onPause() -&gt; onStop()</p></li><li><p>回到原 Activity：onRestart() -&gt; onStart() -&gt; onResume()</p></li><li><p>退出当前 Activity：onPause() -&gt; onStop() -&gt; onDestroy()</p></li></ul><p>&emsp;&emsp;以上就是 Activity 的生命周期分析，各位是不是对整个流程信手捏来，我只能说 666 了！</p><p>&emsp;&emsp;最后这里再说一个问题，如果当前 Activity 为 A，此时用户再打开一个新的 Activity 页面 B，<code>Activity A 的 onPause()方法会先调用，然后才调用 B 的 onResume()方法，也就是 Activity B 才启动。这也就是我们说为什么不能在 onPause()方法做太耗时操作。</code>    </p><p>&emsp;&emsp;你以为生命周期介绍到这里就没了？当然不是，上面那是正常情况下，难不保有意外，不然保险公司为啥赚的盆满坡满？<br>这些意外就是系统配置发生了改变，如旋转屏幕。又或是因为内存不足导致 Activity 被 Kill 掉，都是极有可能的。</p><ul><li><p>系统配置发生改变，Activity 就会被销毁然后再重新创建，如果我们不想让 Activity 重新创建，我们也可以通过 Activity 指定 configChanges 属性值为 orientation 值。同时因为 Activity 在这种意外情况下被销毁，系统就会通过 onSaveInstanceState()方法 保存当前 Activity 的状态信息，然后我们可以通过 onRestoreInstanceState()方法 取出并恢复保存的数据，关于这方面的 View 的存储和恢复，具体我就不介绍了，大家感兴趣的可以自己去看看，当然大家可能早就熟门熟路了，嘿嘿。当然了，Android 系统默认实现了控件的状态缓存，减少了开发者的工作量。</p></li><li><p>内存不足导致 Activity 被杀死，当然系统也是按照情况来杀掉进程的，这也就是进程优先级，它们之间的关系如下：<br>  前台 &gt; 可见 &gt; 服务 &gt; 后台 &gt; 空<br>  优先级越大越不容易被杀死，从这里也可以看出，一些重要的后台工作应当放入 Service 中保证不被系统杀死。</p></li></ul><p><br></p><h2 id="Activity-的-LaunchMode"><a href="#Activity-的-LaunchMode" class="headerlink" title="Activity 的 LaunchMode"></a>Activity 的 LaunchMode</h2><p>&emsp;&emsp;在介绍启动模式前，我们先来说说 Android 的任务栈，Android 系统通过栈保存 App 的 Activity，这个栈也就是 Task，表示若干个 Activity 集合，一个 Task 中的 Activity 可以来自不同的 App。对于栈，大家应该都很熟悉，它是一个先进后出的线性表，我就不啰嗦了。</p><p>&emsp;&emsp;启动模式一共有四种启动模式：standard，singleTop，singleTask 和 singleInstance。</p><p>对于它们之间的区别以及功能我就不介绍了，想必大家应该耳熟能详了。那么如何设置启动模式？</p><ul><li>通过 AndroidMenifest 指定：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.example.binshao.mainActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:configChanges</span>=<span class="string">"orientation"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过 Intent 设置 Flag 指定启动模式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setClass(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</span><br><span class="line">intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;还有其他一些常用的 Flag 大家也可以去搜一搜，我这里也不一一介绍了。<br><br></p><h2 id="IntentFilter-使用"><a href="#IntentFilter-使用" class="headerlink" title="IntentFilter 使用"></a>IntentFilter 使用</h2><p>&emsp;&emsp;我们都清楚启动 Activity 可以分为显式调用和隐式调用。显式调用，顾名思义就是明确指定被启动目标对象的信息，非常简单也就不详细介绍了。而隐式调用则相反，它需要 Intent 去匹配目标对象的 IntentFilter 设置的过滤信息，IntentFilter 的过滤信息有 action、category、data。假如与目标对象的不一致则无法启动目标对象。</p><p>&emsp;&emsp;一个过滤信息表中的 action、category 和 data 可以有多个，一个 Activity 当中也可以有过个过滤信息表 intent-filter，只要一个 Intent 能对应其中一组过滤信息表就可以启动对应的目标对象。</p><ul><li><p>action<br>  action其实是字符串，系统也定义了一些 action，还记得那会入门的拨打电话小案例吗？嘿嘿，当然我们可以自定义action。只要 Intent 中的 action 能够和过滤列表中的任何一个 action 值相同就配对成功，值相同指的是 action 的字符串值是一样的。<code>注意：action 是区分大小写的。</code></p></li><li><p>category<br>  category 也是字符串，但是它的配对规则和 action 不同，它要求如果 Intent 中如果含有 category 信息，那么这些所有的 category 都要和过滤列表中的任意一个 category 值相同，也就是 Intent 中的 category 已经是在过滤表中定义过的 category。<code>注意：Intent 可以没有 category，而且它也能配对成功，原因在于系统去启动 Activity 的时候默认会加上“android.intent.category.DEFAULT”这个 category，所以为了成功配对，我们要在过滤列表中添加这个 category。</code></p></li><li><p>data<br>  data 由 mimeType 和 URL 组成，mimeType 是媒体类型，这里就一笔带过吧！其实 data 的配对规则和 action 是相似的，它要求 Intent 中含有 data 数据且可以和过滤列表中任意一个 data 匹配，这个过程是过滤列表中的 data 也出现在 Intent 的 data 中，即配对成功。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:name</span>=<span class="string">"com.example.binshao.mainActivity"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.binshao.z"</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.binshao.s"</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.example.binshao.z"</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.example.binshao.s"</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimeType</span>=<span class="string">"image/*"</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;好了，到这里这篇文章也到了尾声，不知道各位看完是否有收获吗？大家可别因为是继承而忽视，当然这篇文章说是总结，却不够详细，如关于 View 的存储和恢复及源码等也还没深入，以及各种启动模式的应用场景等等，因为时间关系没有总结成文，很多时候自己会但是要提笔写出来真的挺费时间的，怎么说呢，抛砖引玉吧！接下来和大家一起共同进步！<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hello，大家好！今天周一，大家鼓足干劲就是干，反手就是一巴掌（哈哈）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;这篇文章是关于 Activity 的一些总结（小白文，莫喷)，其中部分是刚哥《艺术探索》的读书笔记，Activity 作为四大金刚中出现频率最高的组件，我们可以在各个地方都可以见到它。总结过程中也借此好好回顾下，分享给大家，当然也希望各位大牛能不吝赐教。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://Binshao.site/categories/Android/"/>
    
    
      <category term="Activity" scheme="http://Binshao.site/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>Android 主题和样式</title>
    <link href="http://Binshao.site/2018/03/10/AndroidTheme/"/>
    <id>http://Binshao.site/2018/03/10/AndroidTheme/</id>
    <published>2018-03-10T01:08:15.000Z</published>
    <updated>2018-09-17T01:31:17.454Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hell，大家好！今天是周末，不知道大家是和好友聚聚会还是去外面逛逛，又或是读上一两本好书，不管怎样，希望大家有一个愉快的周末。</p></blockquote><p>&emsp;&emsp;今天来和大家聊聊 Android 开发中的 Theme 和 Style，不知道大家是否和我一样，在刚刚学习 Android 那会，经常很迷惑，它们究竟是什么，之间又有什么关系？那好，我也在这里做个简单的介绍，希望起到一个抛砖引玉的效果（其实是我太菜，嘿嘿！）。</p><a id="more"></a><p>&emsp;&emsp;在这之前，给大家看看 Theme 是用来干什么的，上一个官方的图：</p><p><div align="center"><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fvc9plme0rj30xc0fvjs6.jpg" alt=""></div></p><p><div align="center" style="font-size: 13px; color: red;">两种不同主题带来的效果</div></p><p>&emsp;&emsp;相信各位看完，会不会猛地一拍大腿，“这 TM 的不是换肤吗？还是那种要充 QQ 会员才有的特权！”，嘿嘿。<br><br></p><h2 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h2><p>&emsp;&emsp;首先我们先来看看 Style，顾名思义，Style 风格、样式的意思，用来定义 View 的样式，比如 height、width、padding 等，是一套能够应用于视图组件的属性。</p><p>&emsp;&emsp;我们常常编写在 res/values/styles.xml 下，编写如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"GreenText"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#00FF00<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;编写样式完成后，引用样式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"@style/GreenText"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;运行应用后，可以看到我们的字体颜色为我们定义的样式里字体颜色，非常简单，效果就不贴了。除此之外，样式还支持继承，它能继承并覆盖其他样式的属性。那么应该怎么编写呢？，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"GreenText.Large"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>13dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;GreenText.Large 的命名表明，这个样式它继承了 GreenText 样式的属性，是不是感觉有点特别！除此之外，它不仅可以通过像这样通过命名表示样式继承关系，也还可以通过采用指定父样式来实现继承，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"BigGreenText"</span> <span class="attr">parent</span>=<span class="string">"GreenText"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>13dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;以上就是 Style 的介绍，是不是非常简单呢？<br><br></p><h2 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h2><p>&emsp;&emsp;看完了 Style，再来看看 Theme，翻译过来是主题的意思，它与 Style 作用一样，不同于 Style 作用于个一个单独 View，而它是作用于 Activity 上或是整个应用。试想下，如果要为所有组件逐个添加样式，那样子工作量得多大呀！同样是定义一套公共主题属性，样式属性需要逐个添加，而主题属性自动应用于整个应用。</p><p>&emsp;&emsp;我们先打开 AndroidManifest.xml 文件，就可以看到 application 标签下的 theme 属性，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:theme</span>=<span class="string">"@style/Theme.AppCompat.Light"</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;theme 属性指向主题叫做 Theme.AppCompat.Light，也是定义在 styles.xml 文件中。所以在 AndroidManifest 文件中出现，主题自然可以应用整个应用。查看主题定义（styles.xml 文件下），如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;它们对应的属性值：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"> <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--   color for the app bar and other primary UI elements --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#3F51B5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--   a darker variant of the primary color, used for</span></span><br><span class="line"><span class="comment">            the status bar (on Android 5.0+) and contextual app bars --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#303F9F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--   a secondary color for controls like checkboxes and text fields --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#FF4081<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;colorPrimary 属性主要用来设置工具栏背景色，而 colorPrimaryDark 用于顶部的状态栏，注意：只有 5.0 之后的系统支持状态栏主题色，文不如图，下面来张图，更加直观：</p><p><div align="center"><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fvc9ygm3qsj30j60b5mxs.jpg" alt=""></div></p><p><div align="center" style="font-size: 13px; color: red;">图片来源于网络</div></p><p>&emsp;&emsp;现在在 Android Studio 中创建项目都是自带 AppCompat 主题，也就是兼容包下，还有就是Android 系统自带的主题以及我们自定义的主题，以上是主题的主要来源，同样也来张合照吧：</p><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvca0iyer8j30ek0k5dha.jpg" alt=""></div></p><p><div align="center" style="font-size: 13px; color: red;">图片来源于博客：<a href="https://www.cnblogs.com/zhouyou96/p/5323138.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhouyou96/p/5323138.html</a></div></p><p>&emsp;&emsp;当然，如果我们有需要，也可以添加自己的属性值或覆盖属性值。假如我们想要修改应用背景色，我们也可以在布局文件手动设置背景色属性，如果有许多页面都这样去修改处理，无疑是比较费时的，其实我们只需要覆盖主题背景色属性就可以解决上面的问题了，但是我们首先得找到主题的源头，主题继承导致我们要一层一层往下找，找到我们要的属性，再回到我们的 Styles.xml 文件下覆盖这个属性，也就是设置我们想要的属性值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    ...</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorBackground"</span>&gt;</span>@color/activityBackground<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>注意：colorBackground 属性来自系统，要使用 android 命名空间</code>。关于寻找属性值这个过程由于篇幅所限，我这里就不贴过程了。</p><p>好了，关于它们的介绍就简单说到这里，最后放下文档的链接：<br>【官网文档链接】：<a href="https://developer.android.google.cn/guide/topics/ui/look-and-feel/themes.html#Customize" target="_blank" rel="noopener">https://developer.android.google.cn/guide/topics/ui/look-and-feel/themes.html#Customize</a><br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hell，大家好！今天是周末，不知道大家是和好友聚聚会还是去外面逛逛，又或是读上一两本好书，不管怎样，希望大家有一个愉快的周末。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;今天来和大家聊聊 Android 开发中的 Theme 和 Style，不知道大家是否和我一样，在刚刚学习 Android 那会，经常很迷惑，它们究竟是什么，之间又有什么关系？那好，我也在这里做个简单的介绍，希望起到一个抛砖引玉的效果（其实是我太菜，嘿嘿！）。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://Binshao.site/categories/Android/"/>
    
    
      <category term="Android 主题和样式" scheme="http://Binshao.site/tags/Android-%E4%B8%BB%E9%A2%98%E5%92%8C%E6%A0%B7%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈事件分发机制</title>
    <link href="http://Binshao.site/2018/03/09/dispatch/"/>
    <id>http://Binshao.site/2018/03/09/dispatch/</id>
    <published>2018-03-09T14:45:27.000Z</published>
    <updated>2018-09-16T15:05:48.632Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hello，大家好！今天广州的天气真好，暖洋洋的，好适合出去玩玩出去走走。哈哈，毕竟老是待在电脑前也不是很好，其实我挺想去云南玩的，觉得那里真的好美！有机会，一定去！</p></blockquote><a id="more"></a><p><div align="center"><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fvbpreg5gmj31hc0u0wmi.jpg" alt=""></div></p><h2 id="什么是事件分发"><a href="#什么是事件分发" class="headerlink" title="什么是事件分发"></a>什么是事件分发</h2><p>&emsp;&emsp;今天简单总结下事件分发机制，主要是了解事件的分发、拦截、以及处理事件的流程。在我们学习的时候，最好先对整体流程有一个大致的了解后，我们再去深入学习分发机制，这样就不好学得一头雾水，摸不着头脑！</p><p>&emsp;&emsp;了解事件之前，首先我们要知道触摸事件，一般为按下、滑动、抬起，这个想必大家都很清楚，而 Android 为这些触摸事件封装了个类 MotionEvent, 我们可以通过它去获取触摸点的坐标，或者去获得点击的事件类型，通过不同的 Action 实现不同的逻辑。我们都知道 View 可以放在 ViewGroup 里面，而 ViewGroup 又可以嵌套在另一个 ViewGroup 中，这时候问题就来了，我们的触摸事件到底要给谁处理，是给子 View 还是 父辈 ViewGroup？而事件分发其实就是这个 MotionEvent 事件的分发过程，当事件产生之后，需要把这个事件交给具体的一个 View 进行处理，而这个交付过程就是分发过程。<br><br></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>&emsp;&emsp;这里我们可以联想一下生活中的常见场景，平时上班中，经理把个任务交给下属组长去办，而组长又把这个任务交给了我。当我奋力加班终于把任务完成后，就把完成结果交给了组长，组长又把任务完成结果交给了经理，这样一个任务顺利完成，到最后你发现，领导照样活的滋润，你还是你，苦逼！</p><p>&emsp;&emsp;通过上面这个例子是否更加了解整个过程呢？接下来继续说，事件的分发过程由三个方法完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Binshao"</span>, <span class="string">"ViewGroupA dispatchTouchEvent"</span> + ev.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Binshao"</span>, <span class="string">"ViewGroupA onInterceptTouchEvent"</span> + ev.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">       Log.d(<span class="string">"Binshao"</span>, <span class="string">"ViewGroupA onTouchEvent"</span> + event.getAction());</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>下面来介绍一下这三个方法：</p><ul><li><p>public boolean dispatchTouchEvent(MotionEvent ev)<br>  这个方法是用来进行事件分发的，事件如果传递给当前 View，方法会被调用.</p></li><li><p>public boolean onInterceptTouchEvent(MotionEvent ev)<br>  在上面的方法内部调用，是用来判断是否拦截事件，它的返回值为 True 不继续流程；默认为 False，不拦截继续流程.</p></li><li><p>public boolean onTouchEvent(MotionEvent event)<br>  用来处理点击事件，返回结果表示是否消耗当前事件.<br><br></p></li></ul><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>&emsp;&emsp;光说不练假把式，这里上个简单演示，验证我们的结论：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">com.example.binshao.testdemo1.MyViewGroupA</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:background</span>=<span class="string">"@android:color/holo_blue_bright"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.example.binshao.testdemo1.MyViewGroupB</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"300dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@android:color/holo_green_dark"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">com.example.binshao.testdemo1.MyView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"150dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">"@android:color/darker_gray"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">com.example.binshao.testdemo1.MyViewGroupB</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.example.binshao.testdemo1.MyViewGroupA</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里直接就上布局文件了，自定义 View 和 ViewGroup 代码就不上了，非常简单，下面我们来看看日志打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">E/Binshao: ViewGroupA dispatchTouchEvent0</span><br><span class="line">E/Binshao: ViewGroupA onInterceptTouchEvent0</span><br><span class="line">E/Binshao: ViewGroupB dispatchTouchEvent0</span><br><span class="line">E/Binshao: ViewGroupB onInterceptTouchEvent0</span><br><span class="line">E/Binshao: View dispatchTouchEvent0</span><br><span class="line">E/Binshao: View onTouchEvent0</span><br><span class="line">E/Binshao: ViewGroupB onTouchEvent0</span><br><span class="line">E/Binshao: ViewGroupA onTouchEvent0</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;果然结果和我们分析的一样。</p><p>&emsp;&emsp;当一个事件产生后，首先会传递给根 ViewGroup，这时 dispatchTouchEvent 就会被调用，此时如果当前 ViewGroup 的 onInterceptTouchEvent 方法返回值为 true 就表示它要拦截当前事件，如果为 false 就表示不拦截当前事件，这时候事件就会继续传递到它的子元素，接着子元素就会像上面说的一样，如此重复直到事件被处理。假如所有的元素都不处理这个事件，那么这个事件最终传递给 Activity 处理，也就是它的 onTouchEvent 方法会被调用。<br><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><br></p><ul><li><p>ViewGroup 默认不拦截事件，它的 onInterceptTouchEvent 方法默认返回 false.</p></li><li><p>View 是没有 onInterceptTouchEvent 方法，一旦有事件传递给它，它的 onTouchEvent 方法就会被调用.</p></li><li><p>事件传递过程是由外向内的，也就是先传递给父元素，再由父元素分发给子元素.</p></li></ul><p><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hello，大家好！今天广州的天气真好，暖洋洋的，好适合出去玩玩出去走走。哈哈，毕竟老是待在电脑前也不是很好，其实我挺想去云南玩的，觉得那里真的好美！有机会，一定去！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://Binshao.site/categories/Android/"/>
    
    
      <category term="事件分发" scheme="http://Binshao.site/tags/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android 自定义属性</title>
    <link href="http://Binshao.site/2018/03/08/AttributeSet/"/>
    <id>http://Binshao.site/2018/03/08/AttributeSet/</id>
    <published>2018-03-08T13:42:42.000Z</published>
    <updated>2018-09-16T14:50:50.901Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hello，大家好！今天总结一篇自定义属性的文章，很久之前就想要总结了，懒……对了今天还是三月八日，祝各位小仙女女神节快乐！</p></blockquote><a id="more"></a><p><div align="center"><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fvbrbhfdfcj30dw0k6tbc.jpg" alt=""></div></p><h2 id="自定义属性流程"><a href="#自定义属性流程" class="headerlink" title="自定义属性流程"></a>自定义属性流程</h2><p>&emsp;&emsp;对于自定义属性，大家肯定都已经滚瓜烂熟了（看来是我太菜了），主要是以下几步：</p><pre><code>*  自定义一个类继承自 View 类.*  在 values 目录下新建 XML 文件并编写标签元素.*  在自定义类布局文件中使用自定义属性.*  在自定义类中的构造方法通过 TypedArray 获取自定义属性.</code></pre><p>下面贴出代码演示下流程：</p><ol><li>自定义属性文件：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"number"</span> <span class="attr">format</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">format</span>=<span class="string">"string"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>自定义 View 类并获取自定义属性：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MCustomView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Binshao"</span>;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">MCustomView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">super</span>(context, attrs);</span><br><span class="line">         TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.test);</span><br><span class="line">         <span class="keyword">int</span> num = ta.getString(R.styleable.test_number, <span class="number">0</span>);</span><br><span class="line">         String text = ta.getInteger(R.styleable.test_text);</span><br><span class="line">         Log.e(TAG, <span class="string">"num = "</span> + num + <span class="string">" , text = "</span> + text);</span><br><span class="line">         <span class="comment">//  记得回收资源</span></span><br><span class="line">        ta.recycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>布局文件中就可以使用我们的自定义属性：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"> <span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:binshao</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">tools:context</span>=<span class="string">"com.example.binshao.testdemo1.MCustomView"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">com.example.binshao.testdemo1.MCustomView</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">binshao:number</span>=<span class="string">"1339"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">binshao:text</span>=<span class="string">"十三"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;好了，接下来我们看一下日志打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">03-08 14:14:30.385 13084-13084/com.example.binshao.testdemo1 E/Binshao: num = 1339 , text = 十三</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;到这里我们自定义属性流程就完成了，你以为就结束了？ No，通过网上搜索鸿神博客，构造方法中的参数 AttributeSet 也能获取我们的自定义属性，那我们要怎么获取呢？下面贴出代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MCustomView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Binshao"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MCustomView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        <span class="keyword">int</span> attrsCount = attrs.getAttributeCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; attrsCount; i++) &#123;</span><br><span class="line">            String attrNum = attrs.getAttributeName(i);</span><br><span class="line">            String attrText = attrs.getAttributeValue(i);</span><br><span class="line">            Log.e(TAG, <span class="string">"num = "</span> + attrNum + <span class="string">" , text = "</span> + attrText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志打印结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">03-08 14:31:03.750 17331-17331/? E/Binshao: num = number , text = 1339</span><br><span class="line">203-08 14:31:03.750 17331-17331/? E/Binshao: num = text , text = 十三</span><br></pre></td></tr></table></figure><p><br></p><h2 id="关于-AttributeSet-与-TypedArray"><a href="#关于-AttributeSet-与-TypedArray" class="headerlink" title="关于 AttributeSet 与 TypedArray"></a>关于 AttributeSet 与 TypedArray</h2><p>&emsp;&emsp;那么问题来了，既然 AttributeSet 也能获取所有自定义属性，那么我们还要 TypedArray 干嘛呢？其实 TypedArray 其实可以帮助我们简化工作，如果我们使用 AttributeSet 去获取自定义属性，首先需要获取 id，其次再去进行解析，比较麻烦！而我们的 TypedArray 正是简化这一过程！</p><p>&emsp;&emsp;好了，今天就总结到这里了，最后我贴出鸿神博客地址，那里更加详细：<a href="http://blog.csdn.net/lmj623565791/article/details/45022631/" target="_blank" rel="noopener">http://blog.csdn.net/lmj623565791/article/details/45022631/</a><br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hello，大家好！今天总结一篇自定义属性的文章，很久之前就想要总结了，懒……对了今天还是三月八日，祝各位小仙女女神节快乐！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://Binshao.site/categories/Android/"/>
    
    
      <category term="Android 自定义属性" scheme="http://Binshao.site/tags/Android-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>SurfaceView</title>
    <link href="http://Binshao.site/2018/03/07/SurfaceView/"/>
    <id>http://Binshao.site/2018/03/07/SurfaceView/</id>
    <published>2018-03-07T10:47:39.000Z</published>
    <updated>2018-09-16T14:43:51.467Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这几天让我感觉春天来了！到处散发着“春”（荷尔蒙）的气息？（微笑脸）<br>最近项目需要用到 SurfaceView，发现很久没有写 SurfaceView，什么都忘记了！真是好记性不如烂笔头，记录下吧！</p></blockquote><a id="more"></a><p><div align="center"><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fvbrhq8m8zj30u00gutfs.jpg" alt=""></div></p><h2 id="关于-SurfaceView"><a href="#关于-SurfaceView" class="headerlink" title="关于 SurfaceView"></a>关于 SurfaceView</h2><p>&emsp;&emsp;首先我们发现 SurfaceView 继承自 View，我们都知道 Android 系统提供了 View 让开发者进行绘图处理，那么这个 SurfaceView 又是用来干什么的呢？它和 View 之间又有什么爱恨情仇呢？别急！喝杯茶，且听我娓娓道来。  </p><p>View 的确可以进行绘图处理，但在某些情况下也有些心有余而力不足（才美不外现？），Android 系统通过发出信号对屏幕进行重新绘制，刷新页面间隔为 16 ms，在这段时间内，View 如果执行完成刷新页面操作，页面在视觉上就不会产生卡顿的现象，执行逻辑不多还好，任务一多，如需要频繁刷新页面，特别是 View 在主线程中更新 UI 界面，就会造成主线程阻塞、画面卡顿。你说那可怎么办才好？这不，Android 系统就提供了 SurfaceView 来解决这个问题！<br><br></p><h2 id="区别及使用场景"><a href="#区别及使用场景" class="headerlink" title="区别及使用场景"></a>区别及使用场景</h2><ul><li>SurfaceView 通过子线程中进行画面更新，View 则在主线程中进行画面更新。</li><li>SurfaceView 用于被动更新，如频繁画面更新，View 则用于主动更新，如触摸点击等事件响应等。</li><li>SurfaceView 在底层实现了双缓冲机制，效率大大提升了，View 则没有。</li></ul><p>那么什么时候使用 SurfaceView？<br>&emsp;&emsp;如果当前画面需要不停绘制或者数据处理量较大时，为避免 UI 线程堵塞，就用 SurfaceView 代替 View。<br><br></p><h2 id="光说不练假把式"><a href="#光说不练假把式" class="headerlink" title="光说不练假把式"></a>光说不练假把式</h2><p>&emsp;&emsp;编写 SurfaceView 是可以套用模板代码的，这里贴一下模板代码，然后我们这里面编写相应的逻辑即可！  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SurfaceViewTemplate</span> <span class="keyword">extends</span> <span class="title">SurfaceView</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">         <span class="title">SurfaceHolder</span>.<span class="title">Callback</span>, <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// SurfaceHolder</span></span><br><span class="line">    <span class="keyword">private</span> SurfaceHolder mHolder;</span><br><span class="line">    <span class="comment">// 用于绘图的Canvas</span></span><br><span class="line">    <span class="keyword">private</span> Canvas mCanvas;</span><br><span class="line">    <span class="comment">// 子线程开启标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsRunning;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SurfaceViewTemplate</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SurfaceViewTemplate</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SurfaceViewTemplate</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mHolder = getHolder();</span><br><span class="line">        mHolder.addCallback(<span class="keyword">this</span>);</span><br><span class="line">        setFocusable(<span class="keyword">true</span>);</span><br><span class="line">        setFocusableInTouchMode(<span class="keyword">true</span>);</span><br><span class="line">        setKeepScreenOn(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceCreated</span><span class="params">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class="line">        mIsRunning = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceChanged</span><span class="params">(SurfaceHolder holder,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">int</span> format, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceDestroyed</span><span class="params">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class="line">        mIsRunning = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (mIsRunning) &#123;</span><br><span class="line">            draw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mCanvas = mHolder.lockCanvas();</span><br><span class="line">            <span class="comment">// 在这里编写绘制逻辑</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCanvas != <span class="keyword">null</span>)</span><br><span class="line">                mHolder.unlockCanvasAndPost(mCanvas);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到我们首先创建个模板继承自 SurfaceView，分别实现 SurfaceHolder.Callback 和 Runnable 这两个接口并实现接口里的方法，然后初始化 SurfaceHolder以及注册 SurfaceHolder的回调方法。和 View 一样，成员变量 Canvas 也是用来给 SurfaceView 进行绘图的，而布尔类型的 mIsRunning 则是用来控制子线程的，因为 SurfaceView 会在子线程中进行绘制操作。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SurfaceView 的创建</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceCreated</span><span class="params">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class="line">       mIsDrawing = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// SurfaceView 的改变</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceChanged</span><span class="params">(SurfaceHolder holder,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> format, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// SurfaceView 的销毁</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceDestroyed</span><span class="params">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class="line">       mIsDrawing = <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><div align="center" style="color: red; font-size: 13px;">实现 SurfaceHolder.Callback 接口的方法</div></p><p>&emsp;&emsp;绘制时，利用上图三个回调方法，在 surfaceCreated()方法开启子线程进行绘制操作，子线程中则使用 while 循环进行画面绘制，而绘制逻辑中通过 lockCanvas()方法获得 Canvas 对象去绘制对象，绘制完成后，最后通过 unlockCanvasAndPost(mCanvas)方法提交内容。</p><p>&emsp;&emsp;到这里整个模板代码就完成了，我们编写 SurfaceView 只需要套用模板，在里面编写相应的逻辑就可以了！<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这几天让我感觉春天来了！到处散发着“春”（荷尔蒙）的气息？（微笑脸）&lt;br&gt;最近项目需要用到 SurfaceView，发现很久没有写 SurfaceView，什么都忘记了！真是好记性不如烂笔头，记录下吧！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://Binshao.site/categories/Android/"/>
    
    
      <category term="SurfaceView" scheme="http://Binshao.site/tags/SurfaceView/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://Binshao.site/2018/02/17/hello-world/"/>
    <id>http://Binshao.site/2018/02/17/hello-world/</id>
    <published>2018-02-17T05:39:03.000Z</published>
    <updated>2018-09-16T14:17:23.653Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Hi，我是十三，当然也可以叫我 Binshao。这是我的第一篇个人博客！</p><a id="more"></a><p><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;Hi，我是十三，当然也可以叫我 Binshao。这是我的第一篇个人博客！&lt;/p&gt;
    
    </summary>
    
      <category term="Hello World" scheme="http://Binshao.site/categories/Hello-World/"/>
    
    
      <category term="Hello World" scheme="http://Binshao.site/tags/Hello-World/"/>
    
  </entry>
  
</feed>
