<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>十三的个人博客</title>
  
  <subtitle>我不在彩虹，彩虹在我.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Binshao.site/"/>
  <updated>2018-09-16T10:46:31.393Z</updated>
  <id>http://Binshao.site/</id>
  
  <author>
    <name>十三</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>扎心的八月</title>
    <link href="http://Binshao.site/2018/08/30/Aug/"/>
    <id>http://Binshao.site/2018/08/30/Aug/</id>
    <published>2018-08-30T01:29:02.000Z</published>
    <updated>2018-09-16T10:46:31.393Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，我是十三，人生中最后一个暑假假期就剩下两天了，余额严重不足感……  </p></blockquote><p>&emsp;&emsp;好些天没来记录了，这段时间都用来养病去了，以至于感觉过的没那么充实却又觉意义深远，今天家这边大雨倾盆，竟然有些凉意。</p><a id="more"></a><p><img src="https://i.loli.net/2018/09/16/5b9de98f3f511.jpg" alt=""></p><h2 id="糟糕的八月"><a href="#糟糕的八月" class="headerlink" title="糟糕的八月"></a>糟糕的八月</h2><p>&emsp;&emsp;假期这段时间以来，大多数时间就在电脑前敲代码、查阅技术书籍，记录学习过程并总结成文，就这样一天过一天，时间如流水，转眼就来到月，也不知道是哪天感觉双眼发烫，眨眼间有种胀痛感，镜子前一看双眼充红，这一下给吓得不行，赶紧找大夫去…</p><p>&emsp;&emsp;接下来这段时间自然便是与药片相伴的日子，因用眼过度导致眼疲劳，一不小心病毒就入侵了，病毒侵占成功并大肆举起红旗，颇有得意之感。双眼看起来就像杀红了眼…每隔 2 小时就得滴眼药水，这种状态一直持续了好久，还记得养病期间和老友们去影院看电影，全程都在闭着眼睛没怎么看电影，过后还被批评不走心（你看我一脸委屈脸，哭），现在想想还觉得挺好笑，哈哈！</p><h2 id="用眼指南"><a href="#用眼指南" class="headerlink" title="用眼指南"></a>用眼指南</h2><p>&emsp;&emsp;既然出了问题就要找出问题所在，我回顾了下，长期坐在电脑跟前不动这算其一，放松娱乐就是下意识拿起手机，真当身体是刀枪不入？这样子下来眼睛肯定受不了，是该学点养生知识了：  </p><ul><li>泡点菊花枸杞茶喝喝.  </li><li>使用电脑每隔 <code>四五十</code> 分钟起身走走，让眼睛眺望远处放松放松.</li><li>有意识地增加眨眼次数.</li><li>做做眼保健操.</li><li>保证充足的睡眠.</li><li>真的要加强锻炼身体.</li></ul><p>&emsp;&emsp;是不是俨然一副手拿保温杯养生老干部的样子，高手在民间，呵…</p><p>&emsp;&emsp;经过这段时间的休息，眼睛也恢复的差不多了，然而我的假期就快要结束了，没有想到会这样度过这最后一个暑假期，我想这还真是让人印象深刻阿！吃一垫，长一智！这看似糟糕的八月，却敲响了警钟，我们始终认为自己还年轻，可事实却告诉我们这是在玩火！</p><p>&emsp;&emsp;最后希望大家都有一个强壮健康的身体！<br><br><br><br></p><hr><p><div align="center"><img src="https://i.loli.net/2018/09/16/5b9df45789538.jpg" alt="长按点击关注"><br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，我是十三，人生中最后一个暑假假期就剩下两天了，余额严重不足感……  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;好些天没来记录了，这段时间都用来养病去了，以至于感觉过的没那么充实却又觉意义深远，今天家这边大雨倾盆，竟然有些凉意。&lt;/p&gt;
    
    </summary>
    
      <category term="时光任意门" scheme="http://Binshao.site/categories/%E6%97%B6%E5%85%89%E4%BB%BB%E6%84%8F%E9%97%A8/"/>
    
    
      <category term="生活杂谈" scheme="http://Binshao.site/tags/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
      <category term="健康" scheme="http://Binshao.site/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>SurfaceView</title>
    <link href="http://Binshao.site/2018/03/07/SurfaceView/"/>
    <id>http://Binshao.site/2018/03/07/SurfaceView/</id>
    <published>2018-03-07T10:47:39.000Z</published>
    <updated>2018-09-16T13:07:01.341Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这几天让我感觉春天来了！到处散发着“春”（荷尔蒙）的气息？（微笑脸）<br>最近项目需要用到 SurfaceView，发现很久没有写 SurfaceView，什么都忘记了！真是好记性不如烂笔头，记录下吧！</p></blockquote><a id="more"></a><p><img src="https://i.loli.net/2018/09/16/5b9e38f359805.jpg" alt=""></p><h2 id="关于-SurfaceView"><a href="#关于-SurfaceView" class="headerlink" title="关于 SurfaceView"></a>关于 SurfaceView</h2><p>&emsp;&emsp;首先我们发现 SurfaceView 继承自 View，我们都知道 Android 系统提供了 View 让开发者进行绘图处理，那么这个 SurfaceView 又是用来干什么的呢？它和 View 之间又有什么爱恨情仇呢？别急！喝杯茶，且听我娓娓道来。  </p><p>View 的确可以进行绘图处理，但在某些情况下也有些心有余而力不足（才美不外现？），Android 系统通过发出信号对屏幕进行重新绘制，刷新页面间隔为 16 ms，在这段时间内，View 如果执行完成刷新页面操作，页面在视觉上就不会产生卡顿的现象，执行逻辑不多还好，任务一多，如需要频繁刷新页面，特别是 View 在主线程中更新 UI 界面，就会造成主线程阻塞、画面卡顿。你说那可怎么办才好？这不，Android 系统就提供了 SurfaceView 来解决这个问题！<br><br></p><h2 id="区别及使用场景"><a href="#区别及使用场景" class="headerlink" title="区别及使用场景"></a>区别及使用场景</h2><ul><li>SurfaceView 通过子线程中进行画面更新，View 则在主线程中进行画面更新。</li><li>SurfaceView 用于被动更新，如频繁画面更新，View 则用于主动更新，如触摸点击等事件响应等。</li><li>SurfaceView 在底层实现了双缓冲机制，效率大大提升了，View 则没有。</li></ul><p>那么什么时候使用 SurfaceView？<br>&emsp;&emsp;如果当前画面需要不停绘制或者数据处理量较大时，为避免 UI 线程堵塞，就用 SurfaceView 代替 View。<br><br></p><h2 id="光说不练假把式"><a href="#光说不练假把式" class="headerlink" title="光说不练假把式"></a>光说不练假把式</h2><p>&emsp;&emsp;编写 SurfaceView 是可以套用模板代码的，这里贴一下模板代码，然后我们这里面编写相应的逻辑即可！  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SurfaceViewTemplate</span> <span class="keyword">extends</span> <span class="title">SurfaceView</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">         <span class="title">SurfaceHolder</span>.<span class="title">Callback</span>, <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// SurfaceHolder</span></span><br><span class="line">    <span class="keyword">private</span> SurfaceHolder mHolder;</span><br><span class="line">    <span class="comment">// 用于绘图的Canvas</span></span><br><span class="line">    <span class="keyword">private</span> Canvas mCanvas;</span><br><span class="line">    <span class="comment">// 子线程开启标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsRunning;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SurfaceViewTemplate</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SurfaceViewTemplate</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SurfaceViewTemplate</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mHolder = getHolder();</span><br><span class="line">        mHolder.addCallback(<span class="keyword">this</span>);</span><br><span class="line">        setFocusable(<span class="keyword">true</span>);</span><br><span class="line">        setFocusableInTouchMode(<span class="keyword">true</span>);</span><br><span class="line">        setKeepScreenOn(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceCreated</span><span class="params">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class="line">        mIsRunning = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceChanged</span><span class="params">(SurfaceHolder holder,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">int</span> format, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceDestroyed</span><span class="params">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class="line">        mIsRunning = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (mIsRunning) &#123;</span><br><span class="line">            draw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mCanvas = mHolder.lockCanvas();</span><br><span class="line">            <span class="comment">// 在这里编写绘制逻辑</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCanvas != <span class="keyword">null</span>)</span><br><span class="line">                mHolder.unlockCanvasAndPost(mCanvas);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到我们首先创建个模板继承自 SurfaceView，分别实现 SurfaceHolder.Callback 和 Runnable 这两个接口并实现接口里的方法，然后初始化 SurfaceHolder以及注册 SurfaceHolder的回调方法。和 View 一样，成员变量 Canvas 也是用来给 SurfaceView 进行绘图的，而布尔类型的 mIsRunning 则是用来控制子线程的，因为 SurfaceView 会在子线程中进行绘制操作。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SurfaceView 的创建</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceCreated</span><span class="params">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class="line">       mIsDrawing = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// SurfaceView 的改变</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceChanged</span><span class="params">(SurfaceHolder holder,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> format, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// SurfaceView 的销毁</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceDestroyed</span><span class="params">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class="line">       mIsDrawing = <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><div align="center" style="color: red; font-size: 13px;">实现 SurfaceHolder.Callback 接口的方法</div></p><p>&emsp;&emsp;绘制时，利用上图三个回调方法，在 surfaceCreated()方法开启子线程进行绘制操作，子线程中则使用 while 循环进行画面绘制，而绘制逻辑中通过 lockCanvas()方法获得 Canvas 对象去绘制对象，绘制完成后，最后通过 unlockCanvasAndPost(mCanvas)方法提交内容。</p><p>&emsp;&emsp;到这里整个模板代码就完成了，我们编写 SurfaceView 只需要套用模板，在里面编写相应的逻辑就可以了！<br><br><br><br></p><hr><p><div align="center"><img src="https://i.loli.net/2018/09/16/5b9df45789538.jpg" alt="长按点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这几天让我感觉春天来了！到处散发着“春”（荷尔蒙）的气息？（微笑脸）&lt;br&gt;最近项目需要用到 SurfaceView，发现很久没有写 SurfaceView，什么都忘记了！真是好记性不如烂笔头，记录下吧！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://Binshao.site/categories/Android/"/>
    
    
      <category term="SurfaceView" scheme="http://Binshao.site/tags/SurfaceView/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://Binshao.site/2018/02/17/hello-world/"/>
    <id>http://Binshao.site/2018/02/17/hello-world/</id>
    <published>2018-02-17T05:39:03.000Z</published>
    <updated>2018-09-16T10:47:15.222Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;Hi，我是十三，当然也可以叫我 Binshao。这是我的第一篇个人博客！</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;Hi，我是十三，当然也可以叫我 Binshao。这是我的第一篇个人博客！&lt;/p&gt;
    
    </summary>
    
      <category term="Hello World" scheme="http://Binshao.site/categories/Hello-World/"/>
    
    
      <category term="Hello World" scheme="http://Binshao.site/tags/Hello-World/"/>
    
  </entry>
  
</feed>
