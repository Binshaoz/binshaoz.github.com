<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>十三的个人博客</title>
  
  <subtitle>我不在彩虹，彩虹在我.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Binshao.site/"/>
  <updated>2018-09-16T14:34:27.735Z</updated>
  <id>http://Binshao.site/</id>
  
  <author>
    <name>十三</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>扎心的八月</title>
    <link href="http://Binshao.site/2018/08/30/Aug/"/>
    <id>http://Binshao.site/2018/08/30/Aug/</id>
    <published>2018-08-30T01:29:02.000Z</published>
    <updated>2018-09-16T14:34:27.735Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，我是十三，人生中最后一个暑假假期就剩下两天了，余额严重不足感……  </p></blockquote><p>&emsp;&emsp;好些天没来记录了，这段时间都用来养病去了，以至于感觉过的没那么充实却又觉意义深远，今天家这边大雨倾盆，竟然有些凉意。</p><a id="more"></a><p><div align="center"><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fvbq1oxu6sj30p00irwm1.jpg" alt=""></div></p><h2 id="糟糕的八月"><a href="#糟糕的八月" class="headerlink" title="糟糕的八月"></a>糟糕的八月</h2><p>&emsp;&emsp;假期这段时间以来，大多数时间就在电脑前敲代码、查阅技术书籍，记录学习过程并总结成文，就这样一天过一天，时间如流水，转眼就来到月，也不知道是哪天感觉双眼发烫，眨眼间有种胀痛感，镜子前一看双眼充红，这一下给吓得不行，赶紧找大夫去…</p><p>&emsp;&emsp;接下来这段时间自然便是与药片相伴的日子，因用眼过度导致眼疲劳，一不小心病毒就入侵了，病毒侵占成功并大肆举起红旗，颇有得意之感。双眼看起来就像杀红了眼…每隔 2 小时就得滴眼药水，这种状态一直持续了好久，还记得养病期间和老友们去影院看电影，全程都在闭着眼睛没怎么看电影，过后还被批评不走心（你看我一脸委屈脸，哭），现在想想还觉得挺好笑，哈哈！<br><br></p><h2 id="用眼指南"><a href="#用眼指南" class="headerlink" title="用眼指南"></a>用眼指南</h2><p>&emsp;&emsp;既然出了问题就要找出问题所在，我回顾了下，长期坐在电脑跟前不动这算其一，放松娱乐就是下意识拿起手机，真当身体是刀枪不入？这样子下来眼睛肯定受不了，是该学点养生知识了：  </p><ul><li>泡点菊花枸杞茶喝喝.  </li><li>使用电脑每隔 <code>四五十</code> 分钟起身走走，让眼睛眺望远处放松放松.</li><li>有意识地增加眨眼次数.</li><li>做做眼保健操.</li><li>保证充足的睡眠.</li><li>真的要加强锻炼身体.</li></ul><p>&emsp;&emsp;是不是俨然一副手拿保温杯养生老干部的样子，高手在民间，呵…</p><p>&emsp;&emsp;经过这段时间的休息，眼睛也恢复的差不多了，然而我的假期就快要结束了，没有想到会这样度过这最后一个暑假期，我想这还真是让人印象深刻阿！吃一垫，长一智！这看似糟糕的八月，却敲响了警钟，我们始终认为自己还年轻，可事实却告诉我们这是在玩火！</p><p>&emsp;&emsp;最后希望大家都有一个强壮健康的身体！<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，我是十三，人生中最后一个暑假假期就剩下两天了，余额严重不足感……  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;好些天没来记录了，这段时间都用来养病去了，以至于感觉过的没那么充实却又觉意义深远，今天家这边大雨倾盆，竟然有些凉意。&lt;/p&gt;
    
    </summary>
    
      <category term="时光任意门" scheme="http://Binshao.site/categories/%E6%97%B6%E5%85%89%E4%BB%BB%E6%84%8F%E9%97%A8/"/>
    
    
      <category term="生活杂谈" scheme="http://Binshao.site/tags/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
      <category term="健康" scheme="http://Binshao.site/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之享元模式</title>
    <link href="http://Binshao.site/2018/07/20/Flyweight/"/>
    <id>http://Binshao.site/2018/07/20/Flyweight/</id>
    <published>2018-07-20T05:52:45.000Z</published>
    <updated>2018-09-18T06:05:50.257Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，我是十三。天气好热都要融化了，恐怖的三伏天……</p></blockquote><p><div align="center"><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fvdnij8wf0j30u00k3t9s.jpg" alt=""></div></p><a id="more"></a><p><br></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;这是设计模式系列的第 十 篇学习记录，天气还是那么炎热，我盼望着富婆的到来，我不想努力了，然而什么都没有出现，继续搬砖…</p><p>&emsp;&emsp;在开始我们今天的学习前，十三首先问大家一个基础的问题，假设现在有 两 个字符串对象，它们的内容也就是赋值相同，那么它们是同一个对象吗？我们先用代码描述出来先 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"LL"</span>;</span><br><span class="line">        String text = <span class="string">"LL"</span>;</span><br><span class="line">        System.out.println(str == text);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;那么最后我们运行程序的结果是什么呢，是 true 还是 false 呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;没错，答案是 true，我们知道在 Java 中字符串常量都是存放在常量池中的，Java 会确保 一 个字符串常量在常量池中只有 一 个拷贝，并且 String 对象是 final 类型，对象一旦创建就不可改变。在平时开发中，会出现许多 String 类型的变量，如果只是小应用倒还好,假设是一个庞大的系统,有好多处都需要用定义 String 类型的变量，那开销可想而知，而 JDK 的开发者自然想到了这点，采用了享元模式解决创建大量相同 String 变量带来的开销问题。</p><p>&emsp;&emsp;那么问题就来了，这个享元模式到底是什么呢？我们接着往下看。<br><br></p><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>&emsp;&emsp;享元模式是池技术的重要实现方式，它不仅可以减少应用程序创建的对象，而且降低了程序内存的占用，提高程序的性能。</p><p><code>定义：使用共享对象有效地支持大量细粒度的对象.</code></p><p>&emsp;&emsp;支持大量细粒度对象，就会使得对象数量多并且性质基本上是相同的，这些对象分为两部分：内部状态和外部状态。</p><p>&emsp;&emsp;内部状态是对象可分享出来的信息，存储在享元对象内部并且不会随环境的改变而改变；如上面的字符串例子中，字符串对象具有字符串类型的特性，这些特性是每个字符串对象都拥有的且是不会改变的。</p><p>&emsp;&emsp;外部状态则是对象依赖的一个标记，它是随环境改变而改变的并且不可共享的状态。如每个字符串对象的内容都可能会不同，它是会随时变化的。</p><p>享元模式中的角色及职责 ：</p><ul><li><p>Flyweight : 抽象享元角色，同时定义出对象的外部状态和内部状态的接口或者实现.</p></li><li><p>ConcreteFlyweight: 具体享元角色，实现抽象享元角色定义的业务方法.</p></li><li><p>FlyweightFactory: 享元工厂，负责管理对象池和创建享元对象.</p></li></ul><p>&emsp;&emsp;光说不练假把式，咱们这里我们就以一个线上手机商城为例子把享元模式用起来 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPrice</span><span class="params">(String phone_Name)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里我们先定义了一个接口，里面分别提供了 showPrice 这个方法，它便对应模式里抽象享元这个角色。我们接着往下看 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple_Phone</span> <span class="keyword">implements</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phoneName;</span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Apple_Phone</span><span class="params">(String phoneName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phoneName = phoneName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showPrice</span><span class="params">(String version)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (version.equals(<span class="string">"32G"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"price : 5199 元"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (version.equals(<span class="string">"64G"</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"price : 5699 元"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;接着我看到这里定义了个类，它实现了前面我们定义的抽象享元角色接口并实现了接口里的方法，那么它对应的角色便是具体享元这个角色了。除了实现接口方法外，我们还定义两个字段属性和构造方法，字段属性分别是手机名字以及手机型号。好，我们继续往下面看 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Apple_Phone&gt; pool = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Phone <span class="title">getPhone</span><span class="params">(String PhoneName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pool.containsKey(PhoneName)) &#123;</span><br><span class="line">            System.out.println(<span class="string">"使用共享对象,手机型号为："</span> + PhoneName);</span><br><span class="line">            <span class="keyword">return</span> pool.get(PhoneName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Apple_Phone phone = <span class="keyword">new</span> Apple_Phone(PhoneName);</span><br><span class="line">            pool.put(PhoneName, phone);</span><br><span class="line">            System.out.println(<span class="string">"创建手机对象,手机型号为："</span> + PhoneName);</span><br><span class="line">            <span class="keyword">return</span> phone;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们看到这个类名带有 Factory，那么想都不用想，它就是享元工厂类这个角色了。享元工厂是用来创建享元对象的，它通过 Map 容器来存储对象，将内部状态的属性作为 Map 的 key，这里我们手机的内部状态便是 PhoneName，不管怎么样手机名字是不会改变的。然后我们进行判断，如果 Map 容器包含这个 key，那我们就使用 Map 容器存储的这个对象；否则就新创建对象并放入 Map 容器中，以达到共享的目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Apple_Phone phoneA = (Apple_Phone) PhoneFactory.getPhone(<span class="string">"iPhone 8"</span>);</span><br><span class="line">        phoneA.showPrice(<span class="string">"64G"</span>);</span><br><span class="line">        Apple_Phone phoneB = (Apple_Phone) PhoneFactory.getPhone(<span class="string">"iPhone 8"</span>);</span><br><span class="line">        phoneB.showPrice(<span class="string">"32G"</span>);</span><br><span class="line">        Apple_Phone phoneC = (Apple_Phone) PhoneFactory.getPhone(<span class="string">"iPhone 8"</span>);</span><br><span class="line">        phoneC.showPrice(<span class="string">"64G"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">创建手机对象,手机型号为：iPhone 8</span><br><span class="line">price : 5699 元</span><br><span class="line">使用共享对象,手机型号为：iPhone 8</span><br><span class="line">price : 5199 元</span><br><span class="line">使用共享对象,手机型号为：iPhone 8</span><br><span class="line">price : 5699 元</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;最后我们通过运行结果可以得到，首先由于是第一次创建对象，Map 容器中并没有存储这个对象，所以它便新建对象便存储到 Map 容器中，接下来，只要再创建对象时便直接使用 Map 容器存储的对象。我们在回过头来想下，在这里，手机名字作为内部状态它是不会改变的，而手机型号则是外部状态它的值是会变化的，当然最终的手机价格也会发生改变。如此一来，因为有了共享对象，节约了开销。<br><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>那么到最后我们来简单总结下 ：</p><p><code>使用场景 :</code><br>如果一个应用程序使用了大量的相似对象，而这些大量的对象造成了很大的存储开销就应该考虑使用；当需要缓冲池的场景。</p><p><code>优点 ：</code><br>减少应用程序创建的对象，降低程序内存的占用，提高程序的性能。</p><p>最后来张观察者模式的合照 ： </p><p><div align="center"><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fvdnp4k285j30ui09s3zk.jpg" alt=""></div></p><p><div align="center" style="font-size: 11px; color: gray;">Flyweight 结构图</div></p><p>&emsp;&emsp;好了，关于享元模式的学习记录就到这里了，天气那么热，各位注意防晒和多吃点水果。<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，我是十三。天气好热都要融化了，恐怖的三伏天……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://wx3.sinaimg.cn/mw690/0060lm7Tly1fvdnij8wf0j30u00k3t9s.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://Binshao.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="享元模式" scheme="http://Binshao.site/tags/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>十三校园泡妞记</title>
    <link href="http://Binshao.site/2018/07/19/Observer/"/>
    <id>http://Binshao.site/2018/07/19/Observer/</id>
    <published>2018-07-19T05:01:09.000Z</published>
    <updated>2018-09-18T05:48:53.182Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，我是十三。一首华仔《暗里着迷》送给大家，怎样，是不是很符合气氛！</p></blockquote><p><div align="center"><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fvdmh8muk6j30zk0npaca.jpg" alt=""></div></p><a id="more"></a><p><div align="center"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=29723022&auto=1&height=66"></iframe></div></p><h2 id="心动的感觉"><a href="#心动的感觉" class="headerlink" title="心动的感觉"></a>心动的感觉</h2><p>&emsp;&emsp;这是设计模式系列的第 九 篇学习记录，什么，你 TM 在逗我，我要看的是妹子，你个标题党！大兄弟，你，你先别急，上吊也得喘口气，且听我娓娓道来……</p><p>&emsp;&emsp;很多人都说大学一定要谈一场轰轰烈烈的恋爱，不然大学不算完整，十三在这之前可能对这些不太上心，觉得谈恋爱还不如打代码来的爽快实在，可十三最近却变了，他变得不再像以前那样那么勤快地敲代码了，不仅这样，他一下子觉得生活仿佛失去了色彩，饭也吃不香，觉也睡不香，大家可能会奇怪了，怎么回事，多上进的小伙子，怎么一下成那样了？</p><p>&emsp;&emsp;十三说这些天他遇见了个妹子，第一眼看见便感很有眼缘，不免多看了几眼。此后几天，不管十三去哪都总能遇见她，总是那么的碰巧，犹如磁石那般有磁性，又像是被安排好一样，只待你走出场来。十三顿时觉得这感觉好奇妙，说不清道不明，每次看到她内心就好高兴可脸上却又一脸淡定，直到人家走远了又觉好失落，十三反问自己这是怎么了同时发现自己又好矛盾，然后就这样慢慢沦陷…</p><p>&emsp;&emsp;晚上，十三决定和兄弟们谈谈心，”都别敲代码了，咱们来聊聊。“，十三对着哥几个说道，”哟，今儿咋怎么有兴致。“，十三接着便把进来情况说了出来，一听见是关于妹子，宿舍几个基佬立马就围了过来…</p><p>&emsp;&emsp;“你是不是看上人家啦，你觉得她哪里好阿？”，一哥们问道。</p><p>&emsp;&emsp;只见十三脑袋微微左倾，像是在回忆似的，“我也不知道怎么说，每次看到她就好开心，看到她在饭堂拿着一碗盛满的热汤，小心翼翼地放下后烫得立马甩手，还吐着小舌头，我就觉得她好可爱；一次在饭堂外的洗水池，我洗完手后不小心撞到一位同学，然后我和这位同学竟然异口同声地说了句不好意思，待我定睛一看，居然是她，那个时候，我看着她我整个人都愣在那里了，要是可以，我希望时间可以静止在那！”。</p><p>&emsp;&emsp;”完了，这家伙坠入爱河了！那等什么阿，追她！“。</p><p>&emsp;&emsp;”对，上啊，追她，哥几个帮你制定作战计划！“，其他哥们纷纷附和着。</p><p>&emsp;&emsp;”知己知彼，百战百胜，我们首先收买她闺蜜，让她做我们的线人给你制造机会。“。</p><p>&emsp;&emsp;好主意，十三点点头暗暗想到。事实上，这个泡妞计划可以应用到设计模式中的观察者模式(画风突变，嘿嘿)。<br><br></p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>&emsp;&emsp;观察者模式又叫做发布-订阅模式，属于行为型设计模式中的一种，在我们平时的开发中经常用到。</p><p><code>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</code></p><p>观察者模式中的角色及职责 ：</p><ul><li><p>Subject : 抽象主题(抽象被观察者)，抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象.</p></li><li><p>ConcreteSubject : 具体主题(具体被观察者)，该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知.</p></li><li><p>Observer : 抽象观察者，是观察者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己.</p></li><li><p>ConcreteObserver : 具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态.</p></li></ul><p>&emsp;&emsp;理论概念说了一大堆，咱们来点实在的 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里我们先定义了一个接口，里面分别提供了 attach、detach、notify 三个方法，它便对应模式里抽象主题这个角色。我们接着往下看 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GirlSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GirlSubject</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; boyList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        boyList.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        boyList.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : boyList) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">":"</span> + message);</span><br><span class="line">            observer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;接着我看到这里定义了个类，它实现了前面我们定义的抽象主题接口并实现了接口里的方法，那么它对应的角色便是具体主题这个角色了。在我们的泡妞计划中，这个类便是我们收买的线人了，我们还可以看到类里还有个容器，这个容器存储的便是十三这个观察者了，当然了，它可以有多个观察者，可这样一来，十三就会不高兴了，这意味着他有情敌。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里这个接口便是抽象观察者了，它里面提供了一个更新方法。然后我们再开看看具体实现它的具体观察者 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoyObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BoyObserver</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">":"</span> + <span class="string">"收到，等我抱得美人归，请你吃饭！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;同样具体观察者类实现了抽象观察者接口里的方法，在计划中这个类便是对应十三这个观察者了。好了，拟定好作战计划好，那么我们就要行动起来 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        BoyObserver boy = <span class="keyword">new</span> BoyObserver(<span class="string">"十三"</span>);</span><br><span class="line"></span><br><span class="line">        GirlSubject girl = <span class="keyword">new</span> GirlSubject(<span class="string">"LL室友"</span>);</span><br><span class="line">        girl.attach(boy);</span><br><span class="line">        girl.notify(<span class="string">"LL出门啦，快去追她！"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LL室友: LL出门啦，快去追她！</span><br><span class="line">  十三: 收到，等我抱得美人归，请你吃饭！</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样子，我们这个作战计划便用了观察者模式来手动实现了，手动？难道还有其他不用手动的方法吗？当然了…<br><br></p><h2 id="Observable-和-Observer"><a href="#Observable-和-Observer" class="headerlink" title="Observable 和 Observer"></a>Observable 和 Observer</h2><p>&emsp;&emsp;其实 Java JDK 下已经有提供了相关的类库帮助我们快速实现观察者模式，它们分别是 Observable 类 和 Observer 接口，下面我们来看看怎么样来应用 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Observable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteSubject</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getNotify</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(name +<span class="string">":"</span> + <span class="string">"LL出门啦，快去追她！"</span>);</span><br><span class="line">        setChanged();</span><br><span class="line">        notifyObservers(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里个类便是具体主题(具体被观察者)，它继承了 JDK 包下的 Observable 这个类，在我们自己编写的 getNotify 方法中，当我们的被观察者状态发生改变后，我们直接调用继承的这个 Observable 这个类的 setChanged() 这个方法，它用来设置一个内部标志位注明状态发生了变化，而 notifyObservers() 方法会去调用一个列表中所有的 Observer 的 update() 方法，以通知它们被观察对象状态发生了变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteObserver</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object object)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">":"</span> + <span class="string">"收到，等我抱得美人归，请你吃饭！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;接着这个类也就是我们的具体观察者，它实现了 Observer 这个接口，我们实现了它的 update()方法，也就是当被观察者的状态发生改变时，观察者的状态也随之更新。最后我们来看看结果 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ConcreteSubject subject = <span class="keyword">new</span> ConcreteSubject(<span class="string">"LL闺蜜"</span>);</span><br><span class="line">        ConcreteObserver observer = <span class="keyword">new</span> ConcreteObserver(<span class="string">"十三"</span>);</span><br><span class="line"></span><br><span class="line">        subject.addObserver(observer);</span><br><span class="line"></span><br><span class="line">        subject.getNotify(<span class="string">"LL出门啦，快去追她！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LL闺蜜: LL出门啦，快去追她！</span><br><span class="line">  十三: 收到，等我抱得美人归，请你吃饭！</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过实现 JDK 包下的提供的类库，我们同样也能实现观察者模式，而且相比与我们自己来手动实现，无疑使用官方提供的类库，我们可以更快地实现。但是十三还是推荐自己动手去实践下再用提供好的类库来实现，因为只有自己去动手操作，才能加深印象。<br><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>那么到最后我们来简单总结下 ：</p><p><code>使用场景 :</code><br>&emsp;&emsp;当一个对象的改变需要同时改变其他对象的时候，并且它还不知道具体有多少对象待改变时，我们应该考虑观察者模式，此外，如 Android 中的广播也是相关的应用场景。</p><p><code>优点 ：</code></p><ul><li><p>观察者和被观察者之间是抽象耦合并且容易扩展.</p></li><li><p>双方的耦合都依赖于抽象，使得各自之间的变化不会影响到另一边.</p></li></ul><p>最后来张观察者模式的合照 ： </p><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvdmuiw7iaj30vk09cwfn.jpg" alt=""></div></p><p><div align="center" style="font-size: 11px; color: gray;">Observer 结构图</div></p><p>&emsp;&emsp;好了，关于观察者模式的学习记录就到这里了，也希望各有情人终成眷属，最后十三想说的是，十三目前还是单身……绝没有任何秀恩爱之说，Ok，Goodbye！<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，我是十三。一首华仔《暗里着迷》送给大家，怎样，是不是很符合气氛！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://wx3.sinaimg.cn/mw690/0060lm7Tly1fvdmh8muk6j30zk0npaca.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://Binshao.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="观察者模式" scheme="http://Binshao.site/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>爆发雄性荷尔蒙——从玩改装赛车中学习装饰模式</title>
    <link href="http://Binshao.site/2018/07/18/design-decorator/"/>
    <id>http://Binshao.site/2018/07/18/design-decorator/</id>
    <published>2018-07-18T01:13:49.000Z</published>
    <updated>2018-09-18T05:00:17.862Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，我是十三。时间一晃假期便过了三天，我人生中最后一个暑假，你慢点走…</p></blockquote><p><div align="center"><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fvdgj1txi8j30zk0fh0wh.jpg" alt=""></div></p><p><div align="center" style="font-size: 11px; color: red;">今晚八点秋名山见…</div></p><a id="more"></a><p>&emsp;&emsp;这是设计模式系列的第 八 篇学习记录，假期也要坚持学习，加油！</p><p>&emsp;&emsp;上篇文章中咱们说到我们自己盖了一套花园别墅，一脸懵逼和不明所以的同学请到传送门接受安检 <a href="https://binshao.site/2018/07/17/Builder/">设计模式之建造者模式</a>。</p><p>&emsp;&emsp;有了房我们就满足了吗？当然没有，人心不足蛇吞象，我十三今天还得有辆车，喝最烈的酒、骑最野的马、泡最辣的妞……嗯哼哼，那个，最近几天怕不是活在了梦里哦。废话少说，你今天还开不开车，哦不，还造不造车……</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;首先我们定义了个接口，既然是车子那肯定会跑，也就是对应 run 方法，而 show 方法则是显示车子属性，代码非常简单，我们接着往下看 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PandaCar</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AE_86最高时速..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里我们创建了个 AE86 汽车类，有哪个老司机开过，嘿嘿？走，咱去车库取车去溜溜 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Car car = <span class="keyword">new</span> PandaCar();</span><br><span class="line">        car.show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;不错，开着 86 出去感觉街上的小姐姐都往着看，但是看过 《头文字D》 的老司机都知道，86 瘫痪了紧接着换上了更恐怖的引擎，简直爆炸输出阿！人的欲望永远都不会满足的，不行，这辆 86 我也要拿去改装 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunCar</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AE86最强跑车引擎..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改装前</span></span><br><span class="line">        Car car = <span class="keyword">new</span> PandaCar();</span><br><span class="line">        car.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 改装后</span></span><br><span class="line">        Car Runcar = <span class="keyword">new</span> RunCar();</span><br><span class="line">        Runcar.show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这下子我们便有最强马力输出的 AE86 了，可是这时我们回过头想下，假若我们要想再进行改装，那我们还得再增加子类并重写方法，虽然说我们这样写的思路是没有错，可是我们还有其他更好的方法吗？<br><br></p><h2 id="装饰模式-Decorator"><a href="#装饰模式-Decorator" class="headerlink" title="装饰模式 (Decorator)"></a>装饰模式 (Decorator)</h2><p>&emsp;&emsp;装饰模式又叫做包装模式，是结构型设计模式之一，其在不必改变类文件和使用继承的情况下，动态地扩展一个对象的功能，是继承的替代方案之一。</p><p><code>定义：动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。</code></p><p>装饰模式中角色和职责 ：</p><ul><li><p>Component : 抽象组件，可以是接口或是抽象类，被装饰的最原始的对象.</p></li><li><p>ConcreteComponent : 组件具体实现类，被装饰的具体对象.</p></li><li><p>Decorator : 抽象装饰者，从外类来扩展 Component 类的功能，但对于 Component 来说无须知道 Decorator 的存在.</p></li><li><p>ConcreteDecorator : 装饰者的具体实现类.</p></li></ul><p>&emsp;&emsp;概念介绍完了之后，我们来看看我们怎么应用装饰模式 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CarDecorator</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCar</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CarDecorator</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里我们定义了个 CarDecorator 抽象类，这里可以看到在它的属性有一个 private 变量指向 Component 抽象组件，所以这个 CarDecorator 便对应角色中的 Decorator，接着我们继续往下看 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyCarDecorator</span> <span class="keyword">extends</span> <span class="title">CarDecorator</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlyCarDecorator</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(car);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对车进行改装</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AE86氮气加速+后尾翼..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.run();</span><br><span class="line">        <span class="keyword">this</span>.fly();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getCar().show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到这个类继承自 CarDecorator 类，它就是具体的装饰者实现类，也就是对应着角色中的 ConcreteDecorator，我们来看下在 Main 方法里的代码 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Car car = <span class="keyword">new</span> RunCar();</span><br><span class="line">        System.out.println(<span class="string">"跑车 —— 无改装:"</span>);</span><br><span class="line">        car.show();</span><br><span class="line">        Car flyCar = <span class="keyword">new</span> FlyCarDecorator(car);</span><br><span class="line">        System.out.println(<span class="string">"跑车 —— 改装飞行属性:"</span>);</span><br><span class="line">        flyCar.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;为了方便查看运行结果，我们添加了些打印语句，来看下 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">跑车 —— 无改装:</span><br><span class="line">AE86最强跑车引擎...</span><br><span class="line">跑车 —— 改装飞行属性:</span><br><span class="line">AE86氮气加速+后尾翼...</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;看，我们在 AE86 的基础上又进行了改装，假若我们还想再在现在这个基础上进行改装，我们只需要这样来做 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwimCarDecorator</span> <span class="keyword">extends</span> <span class="title">CarDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwimCarDecorator</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(car);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AE86水陆两栖属性..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.run();</span><br><span class="line">        <span class="keyword">this</span>.swim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getCar().show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们只需要增加个具体装饰者类就可以了，接着就可以在 Main 方法里调用了 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Car car = <span class="keyword">new</span> RunCar();</span><br><span class="line">        System.out.println(<span class="string">"跑车 —— 无改装:"</span>);</span><br><span class="line">        car.show();</span><br><span class="line"></span><br><span class="line">        Car flyCar = <span class="keyword">new</span> FlyCarDecorator(car);</span><br><span class="line">        System.out.println(<span class="string">"跑车 —— 改装飞行属性:"</span>);</span><br><span class="line">        flyCar.show();</span><br><span class="line"></span><br><span class="line">        Car swimCar = <span class="keyword">new</span> SwimCarDecorator(flyCar);</span><br><span class="line">        System.out.println(<span class="string">"跑车 —— 改装飞行、水陆两栖属性:"</span>);</span><br><span class="line">        swimCar.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">跑车 —— 无改装:</span><br><span class="line">AE86最强跑车引擎...</span><br><span class="line">跑车 —— 改装飞行属性:</span><br><span class="line">AE86氮气加速+后尾翼...</span><br><span class="line">跑车 —— 改装飞行、水陆两栖属性:</span><br><span class="line">AE86水陆两栖属性...</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样到最后，我们经过改装后的 AE86 就有了跑车引擎 + 飞行属性 + 水陆两栖属性，相比于第一次的写法，我们得要在旧类中添加新代码，而装饰模式却提供了一个好的替代方案，它把每个要装饰的功能放在单独的类中，每个装饰对象只需要关心自己的功能就可以了，不知道大家发现没有，上面的代码是不是和 Java I/O 流代码有点像，事实上，I/O 流也是应用到了装饰者模式。<br><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>那么到最后我们来简单总结下 ：<br><code>使用场景 :</code></p><ul><li><p>可以动态给对象增加功能.</p></li><li><p>在不影响其他对象的情况下，以动态透明的方式给单个对象添加职责.</p></li></ul><p><code>优点 ：</code></p><ul><li><p>可以动态扩展一个对象的功能，在运行时也可以选择不同的装饰器从而实现不同的行为.</p></li><li><p>相比于继承的方式，它更灵活.</p></li><li><p>用户可以根据需要增加新的具体装饰类，而不需要修改原有代码，符合开放——封闭原则.</p></li></ul><p><code>缺点 ：</code></p><ul><li><p>当 Component 内部发生改变时，则会影响所有子类，如装饰类和被装饰者.</p></li><li><p>当出现错误时，寻找错误可能需要逐级排查，这就有点蛋疼.</p></li></ul><p>&emsp;&emsp;最后来张装饰模式的合照 ：</p><p><div align="center"><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fvdgikbo1rj30tl0fw40n.jpg" alt=""></div></p><p><div align="center" style="font-size: 11px; color: gray;">Decorator 结构图</div></p><p>&emsp;&emsp;其实在日常生活中，处处都有装饰模式，如穿衣打扮、室内装潢等等，前提是我们要有发现美的眼睛，码农的世界不止 coding 。<br>好了，今天的学习就记录到这里了，也希望大家早日有房有车，走上人生巅峰。<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，我是十三。时间一晃假期便过了三天，我人生中最后一个暑假，你慢点走…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://wx4.sinaimg.cn/mw690/0060lm7Tly1fvdgj1txi8j30zk0fh0wh.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot; style=&quot;font-size: 11px; color: red;&quot;&gt;今晚八点秋名山见…&lt;/div&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://Binshao.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="装饰模式" scheme="http://Binshao.site/tags/%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>买不起房就自己“盖房”来聊聊建造者模式</title>
    <link href="http://Binshao.site/2018/07/17/Builder/"/>
    <id>http://Binshao.site/2018/07/17/Builder/</id>
    <published>2018-07-17T01:13:23.000Z</published>
    <updated>2018-09-18T01:51:21.070Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，我是十三。今天把自己的房间整理打扫了下，感觉心情很 nice 阿！</p></blockquote><p>&emsp;&emsp;这是设计模式系列的第 七 篇学习记录。最近有个段子挺火的，具体内容不记得了，大概是说你天天多早起床，然后天天坚持学习，可依旧还是买不起房…阿，房价始终还是压在心里的一块大石，十年生死两茫茫，房价涨，房奴殇。作为还是学生的十三，可能还没那么深的感触，但是按这目前情况来看，这辈子怕是买不起了。既然买不起那我们就自己”盖房子”，好，那我们就来过把瘾……</p><a id="more"></a><p><div align="center"><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fvdg5fzkzxj30zk0np424.jpg" alt=""></div></p><p><div align="center" style="font-size: 11px; color: gray">先来张图</div></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">House</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String floor;</span><br><span class="line">    <span class="keyword">private</span> String wall;</span><br><span class="line">    <span class="keyword">private</span> String roof;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFloor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> floor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFloor</span><span class="params">(String floor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.floor = floor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wall;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWall</span><span class="params">(String wall)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wall = wall;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoof</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roof;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoof</span><span class="params">(String roof)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roof = roof;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(floor + wall + roof);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;都是些非常基础的代码，三个字段属性分别对应着房子的地板、墙壁以及房顶。十三个人喜欢带花园的别墅，咱就来创建个 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 客户直接建房子</span></span><br><span class="line">        House houseD = <span class="keyword">new</span> House();</span><br><span class="line">        houseD.setFloor(<span class="string">"花园别墅地板 -&gt;"</span>);</span><br><span class="line">        houseD.setWall(<span class="string">"花园别墅墙壁 -&gt;"</span>);</span><br><span class="line">        houseD.setRoof(<span class="string">"花园别墅房顶"</span>);</span><br><span class="line">        houseD.display();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">花园别墅地板 -&gt;花园别墅墙壁 -&gt;花园别墅房顶</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从运行结果中看出，我们先一步步从地板开始建造，到墙壁再到房顶，最后这样我们自己盖了个别墅(YY 的厉害)，只可惜这可住了不了人…哈哈，可是我们回过头来仔细想想，我们盖房子的代码全都是写在客户端里，这明显不是个好办法，而且我们自己来盖房子明显是不够专业的，一般情况下我们都会委托建筑工程队来盖房子，我们只要告诉工程队我要建的是花园别墅就可以了，具体的建造细节我们不需要知道，你只要给我把别墅盖好了就行，所以这里我们可以用到建造者模式。<br><br></p><h2 id="建造者模式-Builder"><a href="#建造者模式-Builder" class="headerlink" title="建造者模式 (Builder)"></a>建造者模式 (Builder)</h2><p>&emsp;&emsp;Builder 模式也叫建造者模式或者生成器模式，是一种对象创建型模式之一，<code>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</code>如果我们用了建造者模式，那么用户就只需要指定需要建造的类型就可以得到它们，而具体建造的过程和细节就不需要知道了。</p><p>&emsp;&emsp;建造者模式中角色和职责 ：</p><ul><li><p>Director : 指挥者，用来根据用户需求创建对象，它构建了一个使用 Builder 接口的对象.</p></li><li><p>Builder : 抽象 Builder 类，规范产品的组建，一般由子类实现.</p></li><li><p>ConcreteBuilder : 具体建造者，实现抽象 Builder 类定义的所有方法，并返回组建好的对象.</p></li><li><p>Product : 产品类</p></li></ul><p>说完了概念，那么下面就来看看我们应该怎么使用建造者模式 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeFloor</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeWall</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeRoof</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">getHouse</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上面的 House 类显然就是 Product 产品类，而这里我们新建了接口，对应的角色便是 Builder 了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VillaBuilder</span> <span class="keyword">implements</span> <span class="title">HouseBuilder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    House house = <span class="keyword">new</span> House();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeFloor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        house.setFloor(<span class="string">"花园别墅地板 -&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeWall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        house.setWall(<span class="string">"花园别墅墙壁 -&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeRoof</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        house.setRoof(<span class="string">"花园别墅屋顶 -&gt;别墅建成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">getHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> house;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;接下来这个类实现了 Builder 类的方法，并且返回了组建好了的实例对象，毫无疑问它就是 ConcreteBuilder 类了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseDirector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HouseBuilder builder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseDirector</span><span class="params">(HouseBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        builder.makeFloor();</span><br><span class="line">        builder.makeWall();</span><br><span class="line">        builder.makeRoof();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;然后，我们再新建个类，它持有 Builder 对象的引用并且有通知 Builder 开始创建对象的方法，它对应便是 Director 这个角色了，就好比我们要盖花园别墅，我们找到工程队，并和工程队设计师说我要建的是花园别墅，接着设计师便开始设计别墅建筑风格并指挥通知工人开工。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        HouseBuilder villa = <span class="keyword">new</span> VillaBuilder();</span><br><span class="line">        HouseDirector d = <span class="keyword">new</span> HouseDirector(villa);</span><br><span class="line">        d.makeHouse();</span><br><span class="line">        House villaHouse = villa.getHouse();</span><br><span class="line">        villaHouse.display();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">花园别墅地板 -&gt;花园别墅墙壁 -&gt;花园别墅屋顶 -&gt;别墅建成</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;最后，我们委托的工程队盖好了别墅，而我们只需要提供类型就可以了，如欧式城堡、四合院等等，至于别墅具体的建造细节我们无须知道，以上便是建造者模式的学习，相比于我们第一次直接在 Main 方法中编写代码，使用建造者模式无疑可扩展性更好。那么，最后我们来总结一下。<br><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;Builder 模式主要用于创建一些复杂的对象，这些对象内部构建间的建造顺序通常是稳定的，但对象内部的构建通常面临这复杂的变化。</p><p>&emsp;&emsp;使用建造者模式可以使客户端不必知道产品内部组成的细节，具体的建造者类之间是相互独立的且容易扩展。<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，我是十三。今天把自己的房间整理打扫了下，感觉心情很 nice 阿！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;这是设计模式系列的第 七 篇学习记录。最近有个段子挺火的，具体内容不记得了，大概是说你天天多早起床，然后天天坚持学习，可依旧还是买不起房…阿，房价始终还是压在心里的一块大石，十年生死两茫茫，房价涨，房奴殇。作为还是学生的十三，可能还没那么深的感触，但是按这目前情况来看，这辈子怕是买不起了。既然买不起那我们就自己”盖房子”，好，那我们就来过把瘾……&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://Binshao.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="建造者模式" scheme="http://Binshao.site/tags/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之原型模式</title>
    <link href="http://Binshao.site/2018/07/16/Prototype/"/>
    <id>http://Binshao.site/2018/07/16/Prototype/</id>
    <published>2018-07-16T01:13:10.000Z</published>
    <updated>2018-09-18T01:37:23.901Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，我是十三。最近把之前的文章删了又重发了，时间上可能不匹配，大家不要觉得奇怪。</p></blockquote><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvdfjpxfnqj30zk0nngr9.jpg" alt=""></div></p><a id="more"></a><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&emsp;&emsp;这是设计模式系列的第 六 篇学习记录，量变引起质变，学习路上还要坚持。今天我们猪脚是原型模式，下面就让我们一起来看看原型模式是什么鬼。<br><br></p><h2 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式 (Prototype)"></a>原型模式 (Prototype)</h2><p>&emsp;&emsp;<code>原型模式</code>是一种对象创建型模式，用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。<br>什么意思呢？别急，我们先简单举个例子，假设我们有个 Person 类，有属性及 Get Set 方法，如下 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + name + <span class="string">"  age: "</span> + age + <span class="string">"  sex: "</span> + sex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;代码非常简单，都是些基础，接下来我们在 Main 方法里创建实例 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.setName(<span class="string">"Binshao"</span>);</span><br><span class="line">        p.setAge(<span class="number">29</span>);</span><br><span class="line">        p.setSex(<span class="string">"Man"</span>);</span><br><span class="line"></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        p1.setName(<span class="string">"十三"</span>);</span><br><span class="line">        p1.setAge(<span class="number">13</span>);</span><br><span class="line">        p1.setSex(<span class="string">"Man"</span>);</span><br><span class="line"></span><br><span class="line">        p.display();</span><br><span class="line">        p1.display();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;那么运行结果显示就为下面所示 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: Binshao  age: 29  sex: Man</span><br><span class="line">name: 十三      age: 13  sex: Man</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样子我们创建两个对象就需要两次实例化，假如这时候我们要多个对象岂不是要实例化多次，这可要麻烦死了。而且不知道大家有没有发现，我们上面创建的两个实例对象的基本结构(属性方法等)都是相同的，那我们有没有其他好的解决办法呢？没错，就用我们刚刚提到的原型模式，那么怎么来做呢，放码 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浅克隆</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Person) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + name + <span class="string">"  age: "</span> + age + <span class="string">"  sex: "</span> + sex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;首先我们让 Person 类实现 Cloneable 这个接口，Clone 顾名思义便是克隆的意思，Java 本身就有提供支持。接着我们再添加个 clone() 方法用来克隆生成新对象，也就是说通过复制原型(Person)来创建新的实例对象，这便完成了克隆，通过原型模式创建的对象，不仅仅<code>与原型对象具有相同的结构，还与原型对象具有相同的值</code>。<br>眼见为实，让我们来看看结果 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.setName(<span class="string">"Binshao"</span>);</span><br><span class="line">        p.setAge(<span class="number">29</span>);</span><br><span class="line">        p.setSex(<span class="string">"Man"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 克隆 p 对象</span></span><br><span class="line">        Person p1 = p.clone();</span><br><span class="line">        <span class="comment">// 当然我们也可以修改值(仅相对于对象数据是值类型)</span></span><br><span class="line">        <span class="comment">//p1.setName("LL");</span></span><br><span class="line">        <span class="comment">//p1.setAge(13);</span></span><br><span class="line">        <span class="comment">//p1.setSex("Girl");</span></span><br><span class="line"></span><br><span class="line">        p.display();</span><br><span class="line">        p1.display();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: Binshao  age: 29  sex: Man</span><br><span class="line">name: Binshao  age: 29  sex: Man</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样一看，果然我们克隆的对象和原型对象的值是相同的。当然，我们也可以修改数据值，前提是对象数据(字段)都是值类型的,如果字段是引用类型，克隆对象则复制引用所有变量但不复制引用的对象，也就是说原型对象和克隆对象引用的是同一个对象。事实上，这样的写法叫做浅克隆。</p><p>&emsp;&emsp;一脸懵逼？没事，我们来看看代码，相信大家就会明白了，首先给 Person 类添加个 friend 字段及 get set 方法 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; friends;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getFriends</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> friends;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFriends</span><span class="params">(List&lt;String&gt; friends)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.friends = friends;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浅克隆</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Person) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + name + <span class="string">"  age: "</span> + age + <span class="string">"  sex: "</span> + sex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们都知道每个人当然不止一个朋友，所以我们用容器来装载。接下来在 Main 方法里看看 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Person per1 = <span class="keyword">new</span> Person();</span><br><span class="line">        List&lt;String&gt; friends = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        friends.add(<span class="string">"Binshao"</span>);</span><br><span class="line">        friends.add(<span class="string">"十三"</span>);</span><br><span class="line">        per1.setFriends(friends);</span><br><span class="line"></span><br><span class="line">        Person per2 = per1.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(per1.getFriends());</span><br><span class="line">        System.out.println(per2.getFriends());</span><br><span class="line"></span><br><span class="line">        friends.add(<span class="string">"LL"</span>);</span><br><span class="line">        per1.setFriends(friends);</span><br><span class="line"></span><br><span class="line">        System.out.println(per1.getFriends());</span><br><span class="line">        System.out.println(per2.getFriends());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Binshao, 十三]</span><br><span class="line">[Binshao, 十三]</span><br><span class="line">[Binshao, 十三, LL]</span><br><span class="line">[Binshao, 十三, LL]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从结果我们看到，克隆对象复制引用了原型对象的所有变量，并且克隆对像和原型对象引用的是同一个对象，对应到我们的例子便是你认识的所有朋友我也认识，因为它们都是同个对象所以能不一样才怪…我们希望的是它们之间可以互相不影响，那么这又怎么做才好呢？<br><br></p><h2 id="深度克隆"><a href="#深度克隆" class="headerlink" title="深度克隆"></a>深度克隆</h2><p>&emsp;&emsp;既然有了浅度克隆便有了深度克隆，深度克隆便把引用对象的变量指向克隆过的新对象，而不是原有的被引用的对象，那么我们直接上大招 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; friends;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getFriends</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> friends;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFriends</span><span class="params">(List&lt;String&gt; friends)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.friends = friends;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浅克隆</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Person) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 深克隆</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">deepClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Person per = (Person) <span class="keyword">super</span>.clone();</span><br><span class="line">            List&lt;String&gt; newFriends = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (String friends : <span class="keyword">this</span>.getFriends()) &#123;</span><br><span class="line">                newFriends.add(friends);</span><br><span class="line">            &#125;</span><br><span class="line">            per.setFriends(newFriends);</span><br><span class="line">            <span class="keyword">return</span> per;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + name + <span class="string">"  age: "</span> + age + <span class="string">"  sex: "</span> + sex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们在这里添加了个深度克隆的方法函数，同样先是获得克隆对象，接着我们通过对 list 容器进行相关赋值，最终返回一个深度克隆的对象，这样一来，克隆对象便把引用对象指向这个复制的新对象，而不是原有的引用对象。最后，我们来验证下看看 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Person per1 = <span class="keyword">new</span> Person();</span><br><span class="line">        List&lt;String&gt; friends = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        friends.add(<span class="string">"Binshao"</span>);</span><br><span class="line">        friends.add(<span class="string">"十三"</span>);</span><br><span class="line">        per1.setFriends(friends);</span><br><span class="line"></span><br><span class="line">        Person per2 = per1.deepClone();</span><br><span class="line"></span><br><span class="line">        System.out.println(per1.getFriends());</span><br><span class="line">        System.out.println(per2.getFriends());</span><br><span class="line"></span><br><span class="line">        friends.add(<span class="string">"LL"</span>);</span><br><span class="line">        per1.setFriends(friends);</span><br><span class="line"></span><br><span class="line">        System.out.println(per1.getFriends());</span><br><span class="line">        System.out.println(per2.getFriends());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Binshao, 十三]</span><br><span class="line">[Binshao, 十三]</span><br><span class="line">[Binshao, 十三, LL]</span><br><span class="line">[Binshao, 十三]</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样一来，果然它们之间可以完全不互相影响。<br><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后我们来总结下原型模式 ：</p><ul><li><p>由原型对象自身创建目标对象，也就是说，对象创建这一动作发自原型对象本身.</p></li><li><p>目标对象是原型对象的一个克隆，也就是说，通过 Prototype 模式创建的对象，不仅仅与原型对象具有相同的结构，还与原型对象具有相同的值.</p></li><li><p>根据对象克隆深度层次的不同，有浅度克隆和深度克隆.</p></li></ul><p>Ok，今天就到这里，溜了……<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，我是十三。最近把之前的文章删了又重发了，时间上可能不匹配，大家不要觉得奇怪。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvdfjpxfnqj30zk0nngr9.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://Binshao.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="原型模式" scheme="http://Binshao.site/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>以古代帝皇来讲单例模式</title>
    <link href="http://Binshao.site/2018/07/15/Singletop/"/>
    <id>http://Binshao.site/2018/07/15/Singletop/</id>
    <published>2018-07-15T06:13:01.000Z</published>
    <updated>2018-09-17T08:15:37.713Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，我是十三，昨天回家了，一早起来继续搬砖，嘿嘿。</p></blockquote><p><div align="center"><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1fvclb9i4tyj30zk0k1n44.jpg" alt=""></div></p><a id="more"></a><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&emsp;&emsp;这是设计模式系列的第 五 篇学习记录，不知道各位大家喜欢读历史吗？十三就非常喜欢看历史，比如《资治通鉴》、《东周列国记》、《三国演义》等等，还记得上小学那会儿在底下看书看得入迷，只是时间一晃就再也不是红领巾了…</p><p>&emsp;&emsp;读史书中总是能看到各个朝代的皇帝，三宫六院，掌握着最高权力，站在食物链顶端俯视着天下，咱还是想想就好…那么对应在软件领域，我们怎么以代码形式来描述呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">King</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">": 众爱卿平身."</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Secretary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大臣：吾皇万岁万岁万万岁!"</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        King k = <span class="keyword">new</span> King();</span><br><span class="line">        k.setName(<span class="string">"秦始皇"</span>);</span><br><span class="line"></span><br><span class="line">        Secretary s = <span class="keyword">new</span> Secretary();</span><br><span class="line">        s.say();</span><br><span class="line">        k.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;那么运行程序就可以看到 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">大臣：吾皇万岁万岁万万岁!</span><br><span class="line">秦始皇: 众爱卿平身.</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;但是我们还忽略了一点就是，我们都知道每个朝代都只能有一个皇上，如果我们像上面那样子来写的话，就会有多个君主这样的情况发生，我们来演示下情况 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Secretary s = <span class="keyword">new</span> Secretary();</span><br><span class="line">        s.say();</span><br><span class="line"></span><br><span class="line">        King king = <span class="keyword">new</span> King();</span><br><span class="line">        king.setName(<span class="string">"秦始皇"</span>);</span><br><span class="line">        king.say();</span><br><span class="line"></span><br><span class="line">        King k = <span class="keyword">new</span> King();</span><br><span class="line">        k.setName(<span class="string">"汉武帝"</span>);</span><br><span class="line">        k.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">大臣：吾皇万岁万岁万万岁!</span><br><span class="line">秦始皇: 众爱卿平身.</span><br><span class="line">汉武帝: 众爱卿平身.</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;一个朝代两个皇帝？这估计下面的大臣一脸懵逼…所谓一山不能容二虎，除非是母老虎，那么我们怎么才能避免上面的情况发生呢？——没错，你猜对了，单例模式。<br><br></p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>&emsp;&emsp;单例模式是一种对象创建型模式，使用单例模式，可以保证为一个类只生成唯一的实例对象，保证一个类只有一个实例存在，同时提供能对该实例加以访问的全局访问方法。</p><p>&emsp;&emsp;好，那么我们就一起来动手写一写这个单例类 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">King</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> King k = <span class="keyword">new</span> King();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数私有化，保证不被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">King</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一个全局的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> King <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">": 众爱卿平身."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们通过这样来改写，它便是一种单例模式的写法，实际上这种写法叫做饿汉式写法，饿汉饿汉，顾名思义，你看，一上来就直接 new 了个对象，能不饥饿？那么我们在 main 方法里测试下看看 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Secretary s = <span class="keyword">new</span> Secretary();</span><br><span class="line">        s.say();</span><br><span class="line"></span><br><span class="line">        King king = King.getInstance();</span><br><span class="line">        king.setName(<span class="string">"秦始皇"</span>);</span><br><span class="line"></span><br><span class="line">        King k = King.getInstance();</span><br><span class="line">        k.setName(<span class="string">"汉武帝"</span>);</span><br><span class="line">        king.say();</span><br><span class="line">        k.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">大臣：吾皇万岁万岁万万岁!</span><br><span class="line">汉武帝: 众爱卿平身.</span><br><span class="line">汉武帝: 众爱卿平身.</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们来看，通过单例类我们去获得了唯一的实例对象，即使我们想修改成两个君主也是修改不了的，这样一来就避免了上面的情况。这种写法在类加载时就完成了初始化，所以类加载较慢但获取对象的速度快，单例模式除了饿汉式写法，还有其他一些写法。<br><br></p><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>来，骚年上码 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">King</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> King k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数私有化，保证不被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">King</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一个全局的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> King <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> k = <span class="keyword">new</span> King();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">": 众爱卿平身."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上面就是懒汉式写法，它声明了个静态对象，在用户第一次调用时初始化，在第一次加载的时候它需要实例化，并且在多线程里可是线程不安全的，我们都知道 CPU 调度，那么该怎么改良呢，来把锁试试，第一反应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">King</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> King k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数私有化，保证不被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">King</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一个全局的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> King <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> k = <span class="keyword">new</span> King();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">": 众爱卿平身."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样一来我们解决了多线程中访问的问题，可如果这样线程每次调用方法都需要进行同步，无疑会造成不必要的开销。没事，接下来我们开大招。<br><br></p><h2 id="双重锁定-DLC"><a href="#双重锁定-DLC" class="headerlink" title="双重锁定 (DLC)"></a>双重锁定 (DLC)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">King</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> King k;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数私有化，保证不被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">King</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一个全局的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> King <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (King.class) &#123;</span><br><span class="line">                <span class="keyword">return</span> k = <span class="keyword">new</span> King();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">": 众爱卿平身."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们在方法里进行了两次判空，第一次是为了判断实例是否存在，第二次则是判断实例是否为空，通过这样的方式可以保证多线程的安全。写到这，心想这已经是最好的写法，NO，NO，没有最好只有更好，当然了，每种写法都各有其利弊。<br><br></p><h2 id="静态内部类单例模式"><a href="#静态内部类单例模式" class="headerlink" title="静态内部类单例模式"></a>静态内部类单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">King</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数私有化，保证不被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">King</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供一个全局的静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> King <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> KingHolder.Instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">KingHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> King Instance = <span class="keyword">new</span> King();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">": 众爱卿平身."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;只有第一次调用方法时才会去初始化实例对象，不仅确保线程安全并且保证类实例对象的唯一性。<br><br></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>&emsp;&emsp;单例模式的学习笔记就做到这里了，单例模式在我们平常开发中非常常见，所以也不做太多介绍了。<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，我是十三，昨天回家了，一早起来继续搬砖，嘿嘿。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/0072Lfvtly1fvclb9i4tyj30zk0k1n44.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://Binshao.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="单例模式" scheme="http://Binshao.site/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之工厂方法模式</title>
    <link href="http://Binshao.site/2018/07/09/Creator/"/>
    <id>http://Binshao.site/2018/07/09/Creator/</id>
    <published>2018-07-09T00:11:11.000Z</published>
    <updated>2018-09-17T07:52:28.654Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，我是十三，今天来记录下工厂方法模式的学习。</p></blockquote><p><div align="center"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=31473269&auto=0&height=66"></iframe></div></p><a id="more"></a><p><div align="center"><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1fvckphusuij30zk0k0dmi.jpg" alt=""></div></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&emsp;&emsp;这是设计模式系列的第 四 篇学习记录，本来今天十三想好好休息一天，可当真的闲下来后却觉得有点虚度光阴的感觉，还是学习去吧…</p><p>&emsp;&emsp;还记得上篇提到水果生产机吗？这里来个传送门 <a href="https://binshao.site/2018/07/07/simpleFactory/">设计模式之简单工厂模式</a>，还没有看过的小伙伴可以先去看看。之前我们就在水果生产机里使用了简单工厂模式来编写指令，我们只需要选择我们想要的水果然后按下按钮(程序运行)，水果生产机便会开始生产。在客户端中(main 方法)我们不用管该用哪个种类的水果实例，我们只需把选择的水果种类交给工厂，工厂便会生产出对应的水果实例。那么问题来了，假如现在十三突然想吃葡萄了，而生产机里还没有葡萄的样本数据(葡萄类)，那么我们就创建呗，然后还要在工厂类里的方法添加多一个分支条件，如下 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get 方法，获得所有产品对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getFruit</span><span class="params">(String type)</span> <span class="keyword">throws</span> InstantiationException, </span></span><br><span class="line"><span class="function"> 5IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">// 判断水果种类，这里忽略大小写</span></span><br><span class="line">        <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"apple"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Apple.class.newInstance();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"banana"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Banana.class.newInstance();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"grape"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Banana.class.newInstance();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"请添加该水果样本数据以便生产..."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可这样一来，便会修改到原有的类，这显然不是个好办法，这样就违背了开放-封闭原则，这可怎么办才好呢？这不，工厂方法模式来了。<br><br></p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>&emsp;&emsp;那么什么是工厂方法模式呢？还有，它和简单工厂模式又有什么区别呢？别急，我们一个个来看。</p><ol><li><p>工厂方法模式 ： </p><p> 工厂方法模式同样属于类的创建型模式，也被称为多态工厂模式.</p><p> 工厂方法模式的意义是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类当中，核心工厂类不再负责产品的创建，这样核心类成为一个抽象工厂角色，仅负责具体工厂子类必须实现的接口，这样进一步抽象化的好处是使得工厂方法模式可以使系统在不修改具体工厂角色的情况下引进新的产品，符合开放-封闭原则.</p></li><li><p>工厂方法模式中的角色和职责 ：</p><p> 抽象工厂(Creator) 工厂方法模式的核心，任何工厂类都必须实现这个接口.</p><p> 具体工厂(Concrete Creator) 具体工厂类是抽象工厂的一个实现，负责实例化产品对象.</p><p> 抽象(Product) 工厂方法模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口.</p><p> 具体产品(Concrete Product) 工厂方法模式所创建的具体实例对象.</p></li></ol><p>&emsp;&emsp;理论概念还是要有，光说不练假把式，接下来我们结合代码来理解下，这里我们的代码还是在上次的水果生产机代码上做修改，好，放码，“驾、驾，吁~”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FruitFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">getFruit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleFactory</span> <span class="keyword">implements</span> <span class="title">FruitFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">getFruit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Apple();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BananaFactory</span> <span class="keyword">implements</span> <span class="title">FruitFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">getFruit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Banana();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们先定义了一个创建水果产品对象的抽象工厂接口，然后分别创建两个具体的水果工厂类，它必须实现抽象接口并实例化相应的水果实例，这样子我们就写好了，是不是非常简单，那么我们来测试一下 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获得AppleFactory</span></span><br><span class="line">        FruitFactory af = <span class="keyword">new</span> AppleFactory();</span><br><span class="line">        <span class="comment">// 通过AppleFactory获得apple实例</span></span><br><span class="line">        Fruit apple = af.getFruit();</span><br><span class="line">        apple.get();</span><br><span class="line"></span><br><span class="line">        FruitFactory bf = <span class="keyword">new</span> BananaFactory();</span><br><span class="line">        Fruit banana = bf.getFruit();</span><br><span class="line">        banana.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;最后运行程序，水果生产机一样也可以生产出水果。那么它与简单工厂模式又有什么区别呢，让我们一起来总结下。<br><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;<code>工厂方法类</code>的核心是一个抽象工厂类，工厂方法模式之所以有一个别名叫多态性工厂模式是因为具体工厂类都有共同的接口，或者有共同的抽象父类。当系统扩展需要添加新的产品对象时，仅仅需要添加一个具体对象以及一个具体工厂对象，原有工厂对象不需要进行任何修改，也不需要修改客户端，很好的符合了开放-封闭原则。</p><p>&emsp;&emsp;<code>简单工厂模式</code>的最大优点在于工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相应的对象，对于客户端而言，去除了与具体产品之间的依赖，可简单工厂模式在添加新产品对象后不得不修改工厂方法，扩展性不好且不符合开放-封闭原则。</p><p>&emsp;&emsp;最后，我们回过头来想了下，其实无论是简单工厂模式还是工厂方法模式，选择判断(水果种类)的问题还是存在，只不过工厂方法模式是在客户端里，而简单工厂模式则是在工厂类里。十三迷惑的望向远方……<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，我是十三，今天来记录下工厂方法模式的学习。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=31473269&amp;auto=0&amp;height=66&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://Binshao.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="工厂方法模式" scheme="http://Binshao.site/tags/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>哆啦A梦来讲简单工厂模式</title>
    <link href="http://Binshao.site/2018/07/07/simpleFactory/"/>
    <id>http://Binshao.site/2018/07/07/simpleFactory/</id>
    <published>2018-07-07T06:10:24.000Z</published>
    <updated>2018-09-17T07:29:56.313Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，我是十三，还有几天就放假了，果然学生还是最轻松的职业。</p></blockquote><p><div align="center"><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1fvckak8dvkj30b40b4jrn.jpg" alt=""></div></p><a id="more"></a><p><div align="center" style="font-size: 11px; color: red;">给大家打个招呼</div></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&emsp;&emsp;这是设计模式系列的第 三 篇学习记录，今天做下笔记记录后，估计得缓几天再来记录设计模式系列的学习过程，十三接下来得要期末考试了，目前为止已经记录了 三 个设计模式，虽说都是些平浅的知识，但十三还是要做个回顾，不是说只为了追求快而把学习过程过一遍，犹如囫囵吞枣。当然了，学好用好不只是一味埋头苦学，还需要大量的编码实践，共勉。</p><p>&emsp;&emsp;相信大家都看过哆啦A梦吧，它的口袋里似乎有着许多好玩有趣的道具，这不，它知道十三经常对着电脑，并且也知道十三喜欢吃水果可又穷得吃土，就送给了十三 一 台万能水果生产机器，可厉害了，按下按钮选择想要的水果便会自动生产出来，简直就是福音啊！<br><br></p><h2 id="神秘的万能水果生产机"><a href="#神秘的万能水果生产机" class="headerlink" title="神秘的万能水果生产机"></a>神秘的万能水果生产机</h2><p>&emsp;&emsp;十三要想吃到可口的水果也没有那么简单，这个生产机你得需要给它下达指令才能开始生产工作，十三来到了指令输入台看了示例，发现可以使用 Java 语言来写指令(惊了，哈哈），这可难不倒十三，不出一会儿功夫就写好了指令 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产香蕉..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产苹果..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;十三编好了两种生产水果的指令后，最后再来给启动按钮写了个指令，如下 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">// 开始生产水果</span></span><br><span class="line">        Apple apple = <span class="keyword">new</span> Apple();</span><br><span class="line">        apple.get();</span><br><span class="line">        Banana banana = <span class="keyword">new</span> Banana();</span><br><span class="line">        banana.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;十三完成所有指令后，迫不及待地按下生产机上的按钮，只听生产机发出一阵轻微的转动声响，然后就像烤面包机完成工作后发出“-叮-”的一声，接着便看到生产机吐出了水果，正是我们想要的苹果和香蕉，十三高兴地叫了出来并吃起了水果来，吃着吃着，十三心想，我是否可以再对刚才的指令进行一下优化，看看是否可以把程序耦合度降低，想了一会儿，突然十三灵光一闪，“有了，我可以考虑通过多态来做”，于是十三重新修改了指令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banana</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产香蕉..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产苹果..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;增加了一个接口 Fruit ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Fruit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">// 使用多态来实例化</span></span><br><span class="line">        Fruit apple = <span class="keyword">new</span> Apple();</span><br><span class="line">        Fruit banana = <span class="keyword">new</span> Banana();</span><br><span class="line">        apple.get();</span><br><span class="line">        banana.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;按下按钮后，生产机同样也能生产出水果，“相比于第一次的写法，程序耦合度降低了不少。”，十三心想，但是如果我还想生产其他些水果，比如火龙果、葡萄等，这些都是很容易变化的地方，应该要考虑这个生产过程。通过一番查阅，十三找到了简单工厂模式可以解决这个问题。<br><br></p><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>&emsp;&emsp;十三看到资料上是这样介绍简单工厂模式的：简单工厂模式属于类的创建型模式，又叫做静态工厂方法模式。通过专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p><ul><li><p>工厂模式中的角色和职责 ： </p><p>  工厂(Creator) : 简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。工厂类可以被外界直接调用，创建所需的产品对象。</p><p>  抽象(Product) : 简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口。</p><p>  具体产品(Concrete Product) ：简单工厂模式所创建的具体实例对象。</p></li></ul><p>&emsp;&emsp;那么怎么对我们的水果生产机上运用呢？别急，看码 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get 方法，获得所有产品对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title">getFruit</span><span class="params">(String type)</span> <span class="keyword">throws</span> InstantiationException, </span></span><br><span class="line"><span class="function"> 5IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="comment">// 判断水果种类，这里忽略大小写</span></span><br><span class="line">        <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"apple"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Apple.class.newInstance();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">"banana"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Banana.class.newInstance();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"请添加该水果属性以便生产..."</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里，我们就创建了个工厂类负责生产水果，只要我们选择并输入想要的水果，工厂类便会生产具体的水果产品，然后把生产好的水果产品返回给我们。当然，我们想要的水果必须得有样本属性在我们的水果生产机里，否则将生产不出来，这个时候，我们就得往生产机添加样本属性。假如添加梨，我们就得创建个类并实现接口，如下 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pear</span> <span class="keyword">implements</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"生产梨..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样，我们就可以修改 main 方法里的代码了 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InstantiationException, </span></span><br><span class="line"><span class="function">    IllegalAccessException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Fruit apple = FruitFactory.getFruit(<span class="string">"Apple"</span>);</span><br><span class="line">        Fruit banana = FruitFactory.getFruit(<span class="string">"Banana"</span>);</span><br><span class="line">        Fruit pear = FruitFactory.getFruit(<span class="string">"Pear"</span>);</span><br><span class="line">        apple.get();</span><br><span class="line">        banana.get();</span><br><span class="line">        pear.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这样，我们的水果生产机便是可以快速生产出我们想要的水果，哈哈…好了，本篇简单工厂模式的学习就到这里了，建议大家也多吃点水果，有益健康哦！<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，我是十三，还有几天就放假了，果然学生还是最轻松的职业。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/0072Lfvtly1fvckak8dvkj30b40b4jrn.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://Binshao.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="简单工厂模式" scheme="http://Binshao.site/tags/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之策略模式</title>
    <link href="http://Binshao.site/2018/07/06/Strategy/"/>
    <id>http://Binshao.site/2018/07/06/Strategy/</id>
    <published>2018-07-06T06:09:56.000Z</published>
    <updated>2018-09-17T07:19:35.090Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，我是十三，今天学院要拍毕业证照片，紧接着明年就要毕业了，滴答滴答，时间就这样悄悄地过去了…</p></blockquote><p>&emsp;&emsp;这是设计模式学习的第二篇学习记录，或许涉及知识层面不深，但十三始终认为好记性不如烂笔头，进阶高深知识也得要有扎实的基础，废话就不多说了，咱们开始今天的学习。</p><a id="more"></a><p>&emsp;&emsp;还记得前段时间各大电商平台的 618 年中大促活动吗？各种优惠返利活动，满 200 减 100，满 300 减 150 等等，让人看了眼花缭乱，控制不住自己分分钟想剁手有没有！那么上面这些优惠活动用代码该怎么实现呢？十三想都没想，直接对着键盘就是一顿狂敲，噼里啪啦，不出一会儿，十三就写好了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (price &gt;= <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> price - <span class="number">100</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (price &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> price - <span class="number">150</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;上面的代码非常简单，也能得到我们想要的结果，可是大家想过没有，如果这时还有其他打折优惠，那按照我们这样来写代码，那岂不是要写非常多的 if else 语句，要知道电商平台是可能经常性的更改打折额度和返利额度的，这样不得写死人，不仅代码不美观而且不利于维护，那该怎么办呢？这时十三熟练地打开 Google，面向搜索编程大法好，一番搜索下来发现，这个问题可以通过策略模式来解决。<br><br></p><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>&emsp;&emsp;那么问题来了，什么是策略模式呢？</p><ul><li>策略模式（Strategy）：它定义了算法家族，分别封装起来，让它们之间可以互相替换，即使算法发生了变化，使用算法的客户也不会受到影响。</li></ul><p>&emsp;&emsp;事实上，无论是哪家电商平台的打折又或是返利活动，其实都是一些算法，这些算法本身也只是商家为了赚钱的一种策略，算法可能随时替换变化，而我们可以用策略模式把这些变化给封装起来，别急，让我们先看下策略模式有哪些角色及对应职责：</p><ul><li><p>策略模式的角色和职责：<br>  Strategy：策略抽象.</p><p>  ConcreteStrategy：各种策略的具体实现.</p><p>  Context：策略的外部封装类，或者说策略的容器类，根据不同的策略执行不同的行为.<br>  策略由外部环境来决定的.</p></li></ul><p>&emsp;&emsp;那么接下来我们就来看看怎么用策略模式来改写我们上面的例子，首先我们先编写 Strategy 这个角色：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">(<span class="keyword">double</span> price)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里我们写好了 Straategy 这个角色，它的职责便是定义所有支持的算法的公共接口，接着便是 ConcreteStrategy 这个角色，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyA</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (price &gt;= <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> price - <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyB</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (price &gt;= <span class="number">300</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> price - <span class="number">150</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到我们写了两个 ConcreteStrategy，它封装了具体的算法或行为，而它是继承自 Strategy，也就是我们所说的打折优惠活动，最后来看下最后一个角色 Context：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line">    <span class="comment">// 初始化时传入具体的策略对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据具体的策略对象，调用其算法的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.strategy.cost(price);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;Context 它维护了一个对 Strategy 对象的引用，而我们的 Main 方法，也就是客户端主要也是和它打交道，那么就来对它做下测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 假设购物所花费为 200 元</span></span><br><span class="line">        <span class="keyword">double</span> price = <span class="number">200</span>;</span><br><span class="line"><span class="comment">//        Context context = new Context(new StrategyA());</span></span><br><span class="line">        Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> StrategyB());</span><br><span class="line">        <span class="keyword">double</span> newPrice = context.cost(price);</span><br><span class="line">        System.out.println(<span class="string">"实际消费 : "</span> + newPrice);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;最后，通过运行我们也能得到正确的结果，由于实例化不同的策略，所以在调用 context.cost()方法时，所获得的结果也是不尽相同的，到这里我们的这个小例子也就完成了。<br><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;回过头来，我们来总结下策略模式，策略模式是一种定义一系列算法的方法，我们知道其实所有算法完成的都是相同的工作，也就是为了给消费者打折优惠，只是不同的算法有不同的实现，而我们可以以相同的方式调用所有的算法，减少各种算法之间的耦合，我们把具体的算法实现封装了起来，这样也就避免了重复编写条件语句。最后，来张策略模式的结构图：</p><p><div align="center"><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1fvck9w8mlpj30z50gomzh.jpg" alt="策略模式 UML 图"></div></p><p>&emsp;&emsp;好了，关于策略模式的学习记录就到了这里，一会儿十三还得去拍毕业证照片，不多说了，下次见。<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，我是十三，今天学院要拍毕业证照片，紧接着明年就要毕业了，滴答滴答，时间就这样悄悄地过去了…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;这是设计模式学习的第二篇学习记录，或许涉及知识层面不深，但十三始终认为好记性不如烂笔头，进阶高深知识也得要有扎实的基础，废话就不多说了，咱们开始今天的学习。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://Binshao.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="策略模式" scheme="http://Binshao.site/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之备忘录模式</title>
    <link href="http://Binshao.site/2018/07/04/Memento/"/>
    <id>http://Binshao.site/2018/07/04/Memento/</id>
    <published>2018-07-04T06:09:22.000Z</published>
    <updated>2018-09-17T07:14:48.864Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，我是十三。今天广州的天气怕是要把我融化了，撑着伞走去实验室的路上，衣服都出汗湿透……</p></blockquote><a id="more"></a><p><div align="center"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=165184&auto=1&height=66"></iframe></div></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;昨天嚷嚷着要学点理财知识，今天又撸代码了，风格转变真快…嘿嘿，这不还是撸代码来的痛快，偶尔换下口味嘛，读书、健身、写作一个都不落下，德智体全面发展，废话就不多说了。平常我们在学习或者看博客文章的时候，多多少少都会接触到源码方面，往往看源码看的却是一头雾水，源码不仅多且各种封装，以及设计模式的使用，新手看的是一个头两个大，比如我就是…刚好，最近也在学习设计模式，借此机会也来记录下，都是些平浅的知识，望各位不吝赐教。<br><br></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>&emsp;&emsp;相信大家可能都有遇到这种情况，有时候我们在编辑 Word 文档或者在 PS 里修图的时候，应用突然奔溃，当我们再次打开的时候，它便提示我们是否进行恢复数据，那么它是怎么实现的呢，我没想过…假设现在我们有一个 Person 类，分别有姓名，性别，年龄。那么我们给它赋值后，假如我还想修改，那么该怎么做呢？我们就快速写一遍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String sex, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name:"</span> + name + <span class="string">",sex:"</span> + sex + <span class="string">",age:"</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;非常简单，接下来我们继续看 main 方法的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mainClass</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person per = <span class="keyword">new</span> Person(<span class="string">"Binshao"</span>, <span class="string">"Man"</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行备份</span></span><br><span class="line">        Person backUp = <span class="keyword">new</span> Person();</span><br><span class="line">        backUp.setName(per.getName());</span><br><span class="line">        backUp.setSex(per.getSex());</span><br><span class="line">        backUp.setAge(per.getAge());</span><br><span class="line"></span><br><span class="line">        per.display();</span><br><span class="line">        <span class="comment">// 修改</span></span><br><span class="line">        per.setAge(<span class="number">23</span>);</span><br><span class="line">        per.display();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 恢复</span></span><br><span class="line">        per.setName(backUp.getName());</span><br><span class="line">        per.setSex(backUp.getSex());</span><br><span class="line">        per.setAge(backUp.getAge());</span><br><span class="line"></span><br><span class="line">        per.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过上面简单的代码我们就实现了恢复数据属性的操作，但是不知道大家发现没有，这样一来，在 main 方法中进行了太多的操作，又是赋值又是修改的，过于繁杂且不符合单一职责原则，那怎么办呢？这时候，备忘录模式就登场了。<br><br></p><h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><p>&emsp;&emsp;如果一个对象需要保存状态并可通过 undo 或 rollback 等操作恢复到以前的状态时，可以使用备忘录模式。其名所示，可以进行恢复回滚数据的操作。</p><ul><li>备忘录(Memento) : 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以对该对象恢复到原先保存的状态。</li></ul><ul><li><p>备忘录的角色和职责 :<br>  Originator(原生者)：需要被保存状态以便恢复的那个对象.</p><p>  Memento(备忘录)：该对象由 Originator 创建，主要用来保存 Originator 的内部状态.</p><p>  Caretaker(管理者)：负责在适当的时间保存/恢复 Originator 对象的状态.</p></li></ul><p>&emsp;&emsp;说了这么多，我们来看看上面那个例子用代码怎么实现。</p><p>&emsp;&emsp;首先是 Person 类的代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String sex, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name:"</span> + name + <span class="string">",sex:"</span> + sex + <span class="string">",age:"</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个备份</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(name, sex, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 恢复备份，还原</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = memento.getName();</span><br><span class="line">        <span class="keyword">this</span>.sex = memento.getSex();</span><br><span class="line">        <span class="keyword">this</span>.age = memento.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到这里多了两个方法，也就是创建备忘录方法和恢复备份这两个方法，我们的 Person 类便是对应角色里的 Originator，而 Memento 备忘录对象则是要由 Originator 来创建，然后我们创建备忘录对象并把要保存的数据导入并实例化到 Memento 对象里去，这也就是我们在 Person 类里面创建的 createMemento 方法。</p><p>&emsp;&emsp;那么这个 Memento 类又是长的什么样子呢？别急，接着往下面看 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String name, String sex, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;猛地一拍大腿，这怎么和 Person 类的代码差不了多少，没错，因为 Memento 类保存的便是 Originator 的内部状态，也就是保存的是我们的 Person 类的内部状态，所以当然差不了哪里去。</p><p>&emsp;&emsp;那么到这里，就还剩下最后一个 Caretaker，来，看码 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里面便是对 Memento 引用，代码非常简单。接下来，我们在 main 方法里看看使用？睁大眼睛，骚年 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person per = <span class="keyword">new</span> Person(<span class="string">"Binshao"</span>, <span class="string">"Man"</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="comment">// 创建管理者并设置备忘录</span></span><br><span class="line">        Caretaker caretaker = <span class="keyword">new</span> Caretaker();</span><br><span class="line">        caretaker.setMemento(per.createMemento());</span><br><span class="line"></span><br><span class="line">        per.display();</span><br><span class="line">        <span class="comment">// 修改年龄</span></span><br><span class="line">        per.setAge(<span class="number">23</span>);</span><br><span class="line">        per.display();</span><br><span class="line">        <span class="comment">// 调用恢复备份的方法</span></span><br><span class="line">        per.setMemento(caretaker.getMemento());</span><br><span class="line">        per.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;运行并看到结果，我们先修改了值然后又把值恢复了。而保存的细节我们封装在 Memento 中，要保存的细节也不会影响到客户端了，就这样，我们这个小例子就写完了，最后再来张备忘录模式的结构图 : </p><p><div align="center"><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1fvcjgzp9vgj30lw0ajab4.jpg" alt=""></div></p><p><div align="center" style="font-size: 11px; color: gray;">结构图</div></p><p>&emsp;&emsp;好了，就写到这里了，祝大家有个愉快的下午茶，下午茶？不存在的……<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，我是十三。今天广州的天气怕是要把我融化了，撑着伞走去实验室的路上，衣服都出汗湿透……&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://Binshao.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="备忘录模式" scheme="http://Binshao.site/tags/%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>黑苹果踩坑指南</title>
    <link href="http://Binshao.site/2018/06/25/blackApple/"/>
    <id>http://Binshao.site/2018/06/25/blackApple/</id>
    <published>2018-06-25T06:07:49.000Z</published>
    <updated>2018-09-17T06:35:54.510Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，我是十三。刚刚高考分数线发布出来了，想必也是有人欢喜有人愁，回想起来，不免心生些许感概。</p></blockquote><a id="more"></a><p><div align="center"><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1fvciqr1843j30zk0n9n2g.jpg" alt=""></div></p><p><div align="center" style="font-size: 13px; color: gray;">十三也想要台 Mac</div></p><h2 id="最近"><a href="#最近" class="headerlink" title="最近"></a>最近</h2><p>&emsp;&emsp;自从上星期端午假后，接下来十三一直都在忙课程设计，What，什么课程设计？iOS…十三所在专业是移动应用专业，也正因此走上 Android 不归路，当然了，既然是移动端，少不了 iOS，这不，十三最近不是正忙着课程设计上嘛。当然了，由于这些年，移动互联网热度的下降，这大大地打击同学们上课的热情（十三从来就很认真，哼哼..大雾），导致于最近不少同学在弄课程设计上都哭爹喊娘的，我也替这些同学感到些惋惜，学院配备全 Mac 一体机的机房环境，这还真是浪费了这良好的学习环境。这不是重点，重点是 Mac 实在是太好用了，我都想放弃自己这台大卡逼 Window 了，还是因为这万恶的金钱，穷啊！</p><p>&emsp;&emsp;所以既然要完成课程设计，无可奈何，只能黑苹果了。通常情况下，都是用 VMware 来跑 Mac 系统，具体安装的流程大家网上搜索下就能找到了，比较坑的是网上提供的系统资源要么跑不起来，要么就是系统版本和 VMware 解锁黑苹果补丁不匹配，除了这点比较坑之外，其他的都可以正常按流程走下去。十三至少花了一天半的时间下镜像和 Xcode 安装包，至少十几个 G，加上学院宿舍里渣渣网速，醉了醉了…<br><br></p><h2 id="黑苹果"><a href="#黑苹果" class="headerlink" title="黑苹果"></a>黑苹果</h2><p>&emsp;&emsp;当然了，十三今天已经把课程设计完成了，十三就把要用到的资源共享下，顺便来说下黑苹果要注意的地方。</p><ul><li><p>首先 VMware 默认是没有安装苹果镜像选项的，所以需要打补丁，而补丁又得要和对应 VMware 版本搭配才能使用，否则无效。</p></li><li><p>其次，当我们完成上面第一步的时候，基本也就能进入苹果系统了，接下来安装 Xcode，要注意 Xcode 版本是对我们安装 Mac OS 版本是有要求的，低版本的 OS X 是不支持高版本的 Xcode，这点大家务必注意下，毕竟 XCode 下载动辄几个 G，对应关系给个例图。</p></li></ul><p><div align="center"><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1fvcivf1cpdj30qa06omy0.jpg" alt=""></div></p><p><div align="center" style="font-size: 13px; color: gray;">对应版本关系图</div></p><p>&emsp;&emsp;走到了这一步，基本上我们 iOS 的开发环境就已经是搭建起来了，别急，我们还可以再优化一下，毕竟虚拟机下跑个系统，机器硬盘下那是卡出了翔……</p><ol><li><p>首先，刚进入桌面就发现一堆的通知显示，这些我们都可以在<code>系统偏好设置</code>中进入<code>扩展</code>选项中，把不需要的通知组件都取消勾选掉，不仅清爽还能流畅不少。</p></li><li><p>其次，OS X 中的菜单和 Dock 都采用了透明效果，好看是好看，可 TM 吃性能，在<code>系统偏好设置</code>中进入<code>辅助功能</code>选项中，然后我们找到<code>减少透明度</code>选项并把它勾选上。</p></li><li><p>最后，来个大杀器——<code>beamoff</code>，安装它可以提升 OS X 在 VMware 的性能，我们可以把它设置为开机自动运行。</p></li></ol><p>&emsp;&emsp;好了，经过上面几步的优化，都可以流畅使用，偶尔会些许卡顿，哎哟，真是累死我了…好了，我把一些用到的资源都共享到百度云盘上，大家去阅读原文点击就能跳转到资源页面了。<br><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;这几天在做课程设计上，发现写代码还是比较行云流水的，主要还是课上 OC 基础语法掌握的不错，我想，这也可以涉及到广度的选择上吧，记得主席任玉刚在博客曾说道他在校期间深入学习 Android 的同时也去了解其他，如 Html，Java 等等，这不也算是扩大自己的知识面吗？这样技术的广度和深度也就有了，而 iOS 作为移动开发，玩 Android 的我们也是可以去看看的，没有坏处。学习之路漫长，还有很多东西要学，大家一起加油，我也争取早一天拥有我第一台的 Mac，无它，好用。溜了溜了…<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，我是十三。刚刚高考分数线发布出来了，想必也是有人欢喜有人愁，回想起来，不免心生些许感概。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://Binshao.site/categories/Mac/"/>
    
    
      <category term="黑苹果" scheme="http://Binshao.site/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>推荐一些读过的技术书籍</title>
    <link href="http://Binshao.site/2018/06/17/readBook/"/>
    <id>http://Binshao.site/2018/06/17/readBook/</id>
    <published>2018-06-17T04:44:48.000Z</published>
    <updated>2018-09-17T05:31:38.347Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，我是十三，端午三天小长假，不知道大家都去哪里浪？</p></blockquote><a id="more"></a><p><div align="center"><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1fvcgt2rm09j30zk0npjwb.jpg" alt=""></div></p><p><div align="center" style="font-size: 13px; color: gray;">photo by Wistaria from Polayoutu</div></p><h2 id="杂七杂八……"><a href="#杂七杂八……" class="headerlink" title="杂七杂八……"></a>杂七杂八……</h2><p>&emsp;&emsp;各位，又是一段时间没来这里写东西了，最近朋友圈可都被世界杯刷屏了，吐槽下，平时看起来不关心的同学，一下子仿佛成了资深球迷，点评的头头是道，就像是要蹭个热点刷个存在感似，发现人都是害怕孤独的，然而一切都被机智的我看穿了（丫的，挺能装！），哈哈！</p><p>&emsp;&emsp;端午节大家去浪的同时，记得给家里人打个电话，有时候吧，亲情阿，懂得自然就懂，十三从来就很珍惜当下，或许我是性情中人？可能真的哪一天才发现失去了最美好的，那时候才真的是后悔莫及。</p><p>&emsp;&emsp;好了，自从最近看完了《Java编程思想》后，我萌发了从头看看自己之前学习的 Android 代码和笔记的念头，说干就干，近几天，由浅入深，我都在回过头来看看之前做的笔记和代码，当然，这比刚入门那会儿来的要轻松，我知道这是基础打得牢固的重要性，一直都要注重基础。滴答滴答，时间就这么过去了，也算是对之前学过的东西做了次回顾，查缺补漏，市面上讲叫做建立自己的知识体系，而一点一点的知识基础，汇总成一个个知识面，由点到面逐渐形成体系。就像书的目录编排，它是有系统性的，由浅入深的。当然了，学的越多不懂得也就越多，这里，大家一起加油！</p><p>&emsp;&emsp;最后就是，这些天刚好各大电商平台都在搞活动，京东和当当都在促销，这里推荐一些 Android 书籍，这些书我都买了并且认为不错。书籍作者都是一些我们熟知的大神，有郭神，主席任玉刚，刘望舒，医生，当然了还有鸿洋大神的玩安卓网站等等，就不废话了。</p><p><div align="center"><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1fvcgtx1c7bj305k074jrk.jpg" alt=""></div></p><p><div align="center" style="font-size: 11px; color: gray;">《第一行代码 第二版》 郭霖著</div></p><p><div align="center"><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1fvch56zgm6j305k077glu.jpg" alt=""></div></p><p><div align="center" style="font-size: 11px; color: gray;">《Android群英传》 徐宜生著</div></p><p><div align="center"><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1fvch5jn13tj305k07ajrh.jpg" alt=""></div></p><p><div align="center" style="font-size: 11px; color: gray;">Android开发艺术探索》 任玉刚著</div></p><p><div align="center"><img src="https://ws1.sinaimg.cn/large/0072Lfvtly1fvch1f11j3j305k07dt8x.jpg" alt=""></div></p><p><div align="center" style="font-size: 11px; color: gray;">Android进阶之光》 刘望舒著</div></p><p>&emsp;&emsp;当然了，除了技术书籍，其他的书籍我也喜欢看，以后再推荐吧，也欢迎大家推荐一些好书给我，端午节快乐，大家！<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，我是十三，端午三天小长假，不知道大家都去哪里浪？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="书籍" scheme="http://Binshao.site/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="Android 书籍" scheme="http://Binshao.site/tags/Android-%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>读 《Java编程思想》</title>
    <link href="http://Binshao.site/2018/06/09/Thinking-in-Java/"/>
    <id>http://Binshao.site/2018/06/09/Thinking-in-Java/</id>
    <published>2018-06-09T04:33:01.000Z</published>
    <updated>2018-09-17T04:42:03.267Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，我是十三。大家最近又去哪里快活了？广州这边近几天受台风影响狂下雨，凉飕飕的，下雨天很适合睡觉啊。</p></blockquote><p><div align="center"><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fvcfkvdyu8j305k07udg6.jpg" alt=""></div></p><p><div align="center" style="color: gray; font-size: 13px;">Java编程思想</div></p><a id="more"></a><h2 id="写点小感悟"><a href="#写点小感悟" class="headerlink" title="写点小感悟"></a>写点小感悟</h2><p>&emsp;&emsp;就在今天早上，我“粗略”地读完了《Java编程思想》这本书，之所以说是粗略看完，是因为书中有好些地方没能搞懂，奈何本人太过菜鸡，功力太浅。而这些没搞懂的地方我暂且把它搁置在了一边，或许某天再去翻过时，我可能会恍然大悟，这期间我还需要经过历练，需要大量的修行。</p><p>&emsp;&emsp;这本书相比一般的书籍来说它非常厚，个人认为入门新手不太适合用这本书，实在是太打击学习热情了。读完这本书，收益也是颇多。首先，能静下心来去看这本书，不说能学到什么，首先能有这份脚踏实地，心平气和的心态就已经很了不起了，现如今浮躁之人比比皆是。其次，与我而言读此书也算是一个回炉重造的过程吧，学 Android 以来，再去回顾 Java ，你就会发现有些知识点会稍显生疏了，而有些东西是我在刚入门 Java 的时候没学过或不知甚解的，才发现其实有很多东西是不知道的，或者说是了解的太过于表面。这个过程会很痛苦，但同时你也知道自己该往哪里学。</p><p>&emsp;&emsp;现在 Google 都在推 Kotlin 了。身边有许多同学这样说，还是不要太浮躁。万变不离其宗，只有深入其原理，再去学习其他也能快速上手，这也是我再回顾 Java 知识的原因，对于基础要扎实同时还要深入。不知道自己不知道，知道自己不知道，知道自己知道。这里与大家共勉，大家一起加油。</p><p>&emsp;&emsp;好了，就说那么多！又到饭点了，可周末学院里的饭菜不太喜欢吃…可想想，明年毕业的我可能再也没机会吃后，又开开心心的去饭堂了。<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，我是十三。大家最近又去哪里快活了？广州这边近几天受台风影响狂下雨，凉飕飕的，下雨天很适合睡觉啊。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;http://wx1.sinaimg.cn/mw690/0060lm7Tly1fvcfkvdyu8j305k07udg6.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;div align=&quot;center&quot; style=&quot;color: gray; font-size: 13px;&quot;&gt;Java编程思想&lt;/div&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="书籍" scheme="http://Binshao.site/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="Java编程思想" scheme="http://Binshao.site/tags/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>学习路上的一些感悟</title>
    <link href="http://Binshao.site/2018/04/27/StudyWay/"/>
    <id>http://Binshao.site/2018/04/27/StudyWay/</id>
    <published>2018-04-27T02:11:44.000Z</published>
    <updated>2018-09-17T03:00:19.457Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hi，大家好！再过三天就是五一了，想好去哪浪了没？今天分享学习路上的一些感悟，一首李荣浩的 《老街》 送给大家。</p></blockquote><a id="more"></a><p><div align="center"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=133998&auto=1&height=66"></iframe></div></p><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvcbcxn4gjj30u00k0n41.jpg" alt=""></div></p><p><div align="center" style="font-size: 13px; color: gray">Photo by qjk6538 from Polayoutu</div></p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>&emsp;&emsp;最近听到有同学抱怨寝室环境不好，加上平时上课觉得老师讲的知识没什么用，还不如自己去自学，上课纯属浪费时间，我认为这是不妥的，在校学习的知识都是基础，我们都知道万丈大楼都是从地基垒起，万变不离其宗，只有打下扎实的基础才能走的更远，虽然基础学习过于枯燥，但不可放弃啊。<br><br></p><h2 id="PotPlayer"><a href="#PotPlayer" class="headerlink" title="PotPlayer"></a>PotPlayer</h2><p>&emsp;&emsp;PotPlayer 是个播放器，它有多强大就不做过多介绍了，最好用就是它的倍速播放，效率提高的可不是一点半点，当然播速是在你能接受范围内，不要只是一味追求速度。不管是看视频也好，看书也罢，每个人都应该有自己的一套学习体系，适合自己的才是最好的，最后，编程是个手艺活，要动手实践，牛逼的奥义在于重复，与大家共勉。<br><br></p><h2 id="做你想做的事"><a href="#做你想做的事" class="headerlink" title="做你想做的事"></a>做你想做的事</h2><p>&emsp;&emsp;难道除了学习就是学习了吗？当然不是，毕竟生活丰富多彩，特别是校园生活，不要为了学习而学习，拒绝“苦行僧”式学习，那样子和机器有什么区别？运动、读书都是值得我们付出时间去做的，我从小就喜欢打乒乓球，坐在电脑前久了就去打上几球，同时我还喜欢旅游，虽然穷逼一个，最想去大理了，觉得那里风景好美。<br><br></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&emsp;&emsp;珍惜现在的校园时光，时间过得真快，或许这是人生中最后一次的校园生活，记录下这些感悟，也许在以后的某天翻见会一笑带过。<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hi，大家好！再过三天就是五一了，想好去哪浪了没？今天分享学习路上的一些感悟，一首李荣浩的 《老街》 送给大家。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="时光任意门" scheme="http://Binshao.site/categories/%E6%97%B6%E5%85%89%E4%BB%BB%E6%84%8F%E9%97%A8/"/>
    
    
      <category term="学习路上" scheme="http://Binshao.site/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E4%B8%8A/"/>
    
  </entry>
  
  <entry>
    <title>Activity 基础总结</title>
    <link href="http://Binshao.site/2018/03/13/Activity/"/>
    <id>http://Binshao.site/2018/03/13/Activity/</id>
    <published>2018-03-13T01:39:18.000Z</published>
    <updated>2018-09-17T02:04:02.355Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hello，大家好！今天周一，大家鼓足干劲就是干，反手就是一巴掌（哈哈）。</p></blockquote><p>&emsp;&emsp;这篇文章是关于 Activity 的一些总结（小白文，莫喷)，其中部分是刚哥《艺术探索》的读书笔记，Activity 作为四大金刚中出现频率最高的组件，我们可以在各个地方都可以见到它。总结过程中也借此好好回顾下，分享给大家，当然也希望各位大牛能不吝赐教。</p><a id="more"></a><p><div align="center"><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fvcamdvj9wj30zk0nq488.jpg" alt=""></div></p><p><div align="center" style="font-size: 13px; color: gray;">Photo by lwowomeme from polaxiong</div></p><h2 id="Activity-的四种状态"><a href="#Activity-的四种状态" class="headerlink" title="Activity 的四种状态"></a>Activity 的四种状态</h2><p>&emsp;&emsp;关于什么是 Activity 的概念我就不介绍了，都烂大街了。Activity 有多种状态，它可以在这几种状态之间切换，并以此影响着 Activity 的生命周期。</p><ul><li><p>Running：<br>  表明 Activity 处于活动状态，用户可以点击屏幕并作出响应，这时候处于 Activity 栈顶。</p></li><li><p>Paused：<br>  表明 Activity 失去焦点或被非全屏 Activity 覆盖，失去和用户交互的能力，在内存不紧张情况下，所有状态信息都还会存在。</p></li><li><p>stopped：<br>  被其他 Activity 完全覆盖，不再是可见的，状态信息同上。</p></li><li><p>Killed:<br>  Activity 已经被系统回收且所有状态信息不存在。<br>  从上面我们可以看出，用户者不同的操作行为会让 Activity 在不同的状态间切换，接下来我们来看看它的生命周期。</p></li></ul><p><br></p><h2 id="Activity-的生命周期"><a href="#Activity-的生命周期" class="headerlink" title="Activity 的生命周期"></a>Activity 的生命周期</h2><p>&emsp;&emsp;先来张经典的官方 Activity 生命周期图：</p><p><div align="center"><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fvcat0b0ryj30e90ift9a.jpg" alt=""></div></p><p><div align="center" style="font-size: 13px; color: gray;">Activity 生命周期</div></p><p>&emsp;&emsp;我们来回顾下上面的方法，看看自己还记得多少（偷笑）：</p><ul><li><p>onCreate()<br>  这是生命周期的第一个方法，此时 Activity 正在创建，一般我们会做一些初始化工作，如加载界面、初始化数据等。</p></li><li><p>onStart()<br>  此时 Activity 正在启动，这时的 Activity 已经可见，可是还没有出现在前台，也就无法和用户进行交互。</p></li><li><p>onResume()<br>  这时候的 Activity 已经可见了且是出现在前台了，<code>注意：和 onStart()相比，onResume()的时候，Activity 已经显示在前台了。</code></p></li><li><p>onPause()<br>  此时的 Activity 正在停止，然后 onStop()就会被调用，一般我们可以做些存储数据等操作，<code>但是这里要注意，不可以做太过耗时操作。</code></p></li><li><p>onStop()<br>  此时的 Activity 即将停止。</p></li><li><p>onRestart()<br>  此时 Activity 正在重新启动，假如 Activity 从不可见重新变为可见的时候，这个方法就会被调用，如打开一个新的页面然后又返回当前 Activity。</p></li><li><p>onDestroy()<br>  这是生命周期最后一个回调方法，此时的 Activity 即将销毁，通常我们会做写资源释放等操作。</p></li></ul><p><br></p><h2 id="生命周期的分析"><a href="#生命周期的分析" class="headerlink" title="生命周期的分析"></a>生命周期的分析</h2><ul><li><p>Activity 启动：onCreate() -&gt; onStart() -&gt; onResume()</p></li><li><p>Home 键返回主界面或被覆盖(Activity 不可见)：onPause() -&gt; onStop()</p></li><li><p>回到原 Activity：onRestart() -&gt; onStart() -&gt; onResume()</p></li><li><p>退出当前 Activity：onPause() -&gt; onStop() -&gt; onDestroy()</p></li></ul><p>&emsp;&emsp;以上就是 Activity 的生命周期分析，各位是不是对整个流程信手捏来，我只能说 666 了！</p><p>&emsp;&emsp;最后这里再说一个问题，如果当前 Activity 为 A，此时用户再打开一个新的 Activity 页面 B，<code>Activity A 的 onPause()方法会先调用，然后才调用 B 的 onResume()方法，也就是 Activity B 才启动。这也就是我们说为什么不能在 onPause()方法做太耗时操作。</code>    </p><p>&emsp;&emsp;你以为生命周期介绍到这里就没了？当然不是，上面那是正常情况下，难不保有意外，不然保险公司为啥赚的盆满坡满？<br>这些意外就是系统配置发生了改变，如旋转屏幕。又或是因为内存不足导致 Activity 被 Kill 掉，都是极有可能的。</p><ul><li><p>系统配置发生改变，Activity 就会被销毁然后再重新创建，如果我们不想让 Activity 重新创建，我们也可以通过 Activity 指定 configChanges 属性值为 orientation 值。同时因为 Activity 在这种意外情况下被销毁，系统就会通过 onSaveInstanceState()方法 保存当前 Activity 的状态信息，然后我们可以通过 onRestoreInstanceState()方法 取出并恢复保存的数据，关于这方面的 View 的存储和恢复，具体我就不介绍了，大家感兴趣的可以自己去看看，当然大家可能早就熟门熟路了，嘿嘿。当然了，Android 系统默认实现了控件的状态缓存，减少了开发者的工作量。</p></li><li><p>内存不足导致 Activity 被杀死，当然系统也是按照情况来杀掉进程的，这也就是进程优先级，它们之间的关系如下：<br>  前台 &gt; 可见 &gt; 服务 &gt; 后台 &gt; 空<br>  优先级越大越不容易被杀死，从这里也可以看出，一些重要的后台工作应当放入 Service 中保证不被系统杀死。</p></li></ul><p><br></p><h2 id="Activity-的-LaunchMode"><a href="#Activity-的-LaunchMode" class="headerlink" title="Activity 的 LaunchMode"></a>Activity 的 LaunchMode</h2><p>&emsp;&emsp;在介绍启动模式前，我们先来说说 Android 的任务栈，Android 系统通过栈保存 App 的 Activity，这个栈也就是 Task，表示若干个 Activity 集合，一个 Task 中的 Activity 可以来自不同的 App。对于栈，大家应该都很熟悉，它是一个先进后出的线性表，我就不啰嗦了。</p><p>&emsp;&emsp;启动模式一共有四种启动模式：standard，singleTop，singleTask 和 singleInstance。</p><p>对于它们之间的区别以及功能我就不介绍了，想必大家应该耳熟能详了。那么如何设置启动模式？</p><ul><li>通过 AndroidMenifest 指定：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.example.binshao.mainActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:configChanges</span>=<span class="string">"orientation"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>通过 Intent 设置 Flag 指定启动模式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setClass(MainActivity.<span class="keyword">this</span>, SecondActivity.class);</span><br><span class="line">intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;还有其他一些常用的 Flag 大家也可以去搜一搜，我这里也不一一介绍了。<br><br></p><h2 id="IntentFilter-使用"><a href="#IntentFilter-使用" class="headerlink" title="IntentFilter 使用"></a>IntentFilter 使用</h2><p>&emsp;&emsp;我们都清楚启动 Activity 可以分为显式调用和隐式调用。显式调用，顾名思义就是明确指定被启动目标对象的信息，非常简单也就不详细介绍了。而隐式调用则相反，它需要 Intent 去匹配目标对象的 IntentFilter 设置的过滤信息，IntentFilter 的过滤信息有 action、category、data。假如与目标对象的不一致则无法启动目标对象。</p><p>&emsp;&emsp;一个过滤信息表中的 action、category 和 data 可以有多个，一个 Activity 当中也可以有过个过滤信息表 intent-filter，只要一个 Intent 能对应其中一组过滤信息表就可以启动对应的目标对象。</p><ul><li><p>action<br>  action其实是字符串，系统也定义了一些 action，还记得那会入门的拨打电话小案例吗？嘿嘿，当然我们可以自定义action。只要 Intent 中的 action 能够和过滤列表中的任何一个 action 值相同就配对成功，值相同指的是 action 的字符串值是一样的。<code>注意：action 是区分大小写的。</code></p></li><li><p>category<br>  category 也是字符串，但是它的配对规则和 action 不同，它要求如果 Intent 中如果含有 category 信息，那么这些所有的 category 都要和过滤列表中的任意一个 category 值相同，也就是 Intent 中的 category 已经是在过滤表中定义过的 category。<code>注意：Intent 可以没有 category，而且它也能配对成功，原因在于系统去启动 Activity 的时候默认会加上“android.intent.category.DEFAULT”这个 category，所以为了成功配对，我们要在过滤列表中添加这个 category。</code></p></li><li><p>data<br>  data 由 mimeType 和 URL 组成，mimeType 是媒体类型，这里就一笔带过吧！其实 data 的配对规则和 action 是相似的，它要求 Intent 中含有 data 数据且可以和过滤列表中任意一个 data 匹配，这个过程是过滤列表中的 data 也出现在 Intent 的 data 中，即配对成功。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:name</span>=<span class="string">"com.example.binshao.mainActivity"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.binshao.z"</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.binshao.s"</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.example.binshao.z"</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.example.binshao.s"</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimeType</span>=<span class="string">"image/*"</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;好了，到这里这篇文章也到了尾声，不知道各位看完是否有收获吗？大家可别因为是继承而忽视，当然这篇文章说是总结，却不够详细，如关于 View 的存储和恢复及源码等也还没深入，以及各种启动模式的应用场景等等，因为时间关系没有总结成文，很多时候自己会但是要提笔写出来真的挺费时间的，怎么说呢，抛砖引玉吧！接下来和大家一起共同进步！<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hello，大家好！今天周一，大家鼓足干劲就是干，反手就是一巴掌（哈哈）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;这篇文章是关于 Activity 的一些总结（小白文，莫喷)，其中部分是刚哥《艺术探索》的读书笔记，Activity 作为四大金刚中出现频率最高的组件，我们可以在各个地方都可以见到它。总结过程中也借此好好回顾下，分享给大家，当然也希望各位大牛能不吝赐教。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://Binshao.site/categories/Android/"/>
    
    
      <category term="Activity" scheme="http://Binshao.site/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>Android 主题和样式</title>
    <link href="http://Binshao.site/2018/03/10/AndroidTheme/"/>
    <id>http://Binshao.site/2018/03/10/AndroidTheme/</id>
    <published>2018-03-10T01:08:15.000Z</published>
    <updated>2018-09-17T01:31:17.454Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hell，大家好！今天是周末，不知道大家是和好友聚聚会还是去外面逛逛，又或是读上一两本好书，不管怎样，希望大家有一个愉快的周末。</p></blockquote><p>&emsp;&emsp;今天来和大家聊聊 Android 开发中的 Theme 和 Style，不知道大家是否和我一样，在刚刚学习 Android 那会，经常很迷惑，它们究竟是什么，之间又有什么关系？那好，我也在这里做个简单的介绍，希望起到一个抛砖引玉的效果（其实是我太菜，嘿嘿！）。</p><a id="more"></a><p>&emsp;&emsp;在这之前，给大家看看 Theme 是用来干什么的，上一个官方的图：</p><p><div align="center"><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fvc9plme0rj30xc0fvjs6.jpg" alt=""></div></p><p><div align="center" style="font-size: 13px; color: red;">两种不同主题带来的效果</div></p><p>&emsp;&emsp;相信各位看完，会不会猛地一拍大腿，“这 TM 的不是换肤吗？还是那种要充 QQ 会员才有的特权！”，嘿嘿。<br><br></p><h2 id="Style"><a href="#Style" class="headerlink" title="Style"></a>Style</h2><p>&emsp;&emsp;首先我们先来看看 Style，顾名思义，Style 风格、样式的意思，用来定义 View 的样式，比如 height、width、padding 等，是一套能够应用于视图组件的属性。</p><p>&emsp;&emsp;我们常常编写在 res/values/styles.xml 下，编写如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"GreenText"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#00FF00<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;编写样式完成后，引用样式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"@style/GreenText"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;运行应用后，可以看到我们的字体颜色为我们定义的样式里字体颜色，非常简单，效果就不贴了。除此之外，样式还支持继承，它能继承并覆盖其他样式的属性。那么应该怎么编写呢？，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"GreenText.Large"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>13dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;GreenText.Large 的命名表明，这个样式它继承了 GreenText 样式的属性，是不是感觉有点特别！除此之外，它不仅可以通过像这样通过命名表示样式继承关系，也还可以通过采用指定父样式来实现继承，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"BigGreenText"</span> <span class="attr">parent</span>=<span class="string">"GreenText"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textSize"</span>&gt;</span>13dp<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;以上就是 Style 的介绍，是不是非常简单呢？<br><br></p><h2 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h2><p>&emsp;&emsp;看完了 Style，再来看看 Theme，翻译过来是主题的意思，它与 Style 作用一样，不同于 Style 作用于个一个单独 View，而它是作用于 Activity 上或是整个应用。试想下，如果要为所有组件逐个添加样式，那样子工作量得多大呀！同样是定义一套公共主题属性，样式属性需要逐个添加，而主题属性自动应用于整个应用。</p><p>&emsp;&emsp;我们先打开 AndroidManifest.xml 文件，就可以看到 application 标签下的 theme 属性，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:theme</span>=<span class="string">"@style/Theme.AppCompat.Light"</span> <span class="attr">...</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;theme 属性指向主题叫做 Theme.AppCompat.Light，也是定义在 styles.xml 文件中。所以在 AndroidManifest 文件中出现，主题自然可以应用整个应用。查看主题定义（styles.xml 文件下），如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;它们对应的属性值：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"> <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--   color for the app bar and other primary UI elements --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>#3F51B5<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--   a darker variant of the primary color, used for</span></span><br><span class="line"><span class="comment">            the status bar (on Android 5.0+) and contextual app bars --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>#303F9F<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--   a secondary color for controls like checkboxes and text fields --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>#FF4081<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;colorPrimary 属性主要用来设置工具栏背景色，而 colorPrimaryDark 用于顶部的状态栏，注意：只有 5.0 之后的系统支持状态栏主题色，文不如图，下面来张图，更加直观：</p><p><div align="center"><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fvc9ygm3qsj30j60b5mxs.jpg" alt=""></div></p><p><div align="center" style="font-size: 13px; color: red;">图片来源于网络</div></p><p>&emsp;&emsp;现在在 Android Studio 中创建项目都是自带 AppCompat 主题，也就是兼容包下，还有就是Android 系统自带的主题以及我们自定义的主题，以上是主题的主要来源，同样也来张合照吧：</p><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvca0iyer8j30ek0k5dha.jpg" alt=""></div></p><p><div align="center" style="font-size: 13px; color: red;">图片来源于博客：<a href="https://www.cnblogs.com/zhouyou96/p/5323138.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhouyou96/p/5323138.html</a></div></p><p>&emsp;&emsp;当然，如果我们有需要，也可以添加自己的属性值或覆盖属性值。假如我们想要修改应用背景色，我们也可以在布局文件手动设置背景色属性，如果有许多页面都这样去修改处理，无疑是比较费时的，其实我们只需要覆盖主题背景色属性就可以解决上面的问题了，但是我们首先得找到主题的源头，主题继承导致我们要一层一层往下找，找到我们要的属性，再回到我们的 Styles.xml 文件下覆盖这个属性，也就是设置我们想要的属性值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    ...</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:colorBackground"</span>&gt;</span>@color/activityBackground<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>注意：colorBackground 属性来自系统，要使用 android 命名空间</code>。关于寻找属性值这个过程由于篇幅所限，我这里就不贴过程了。</p><p>好了，关于它们的介绍就简单说到这里，最后放下文档的链接：<br>【官网文档链接】：<a href="https://developer.android.google.cn/guide/topics/ui/look-and-feel/themes.html#Customize" target="_blank" rel="noopener">https://developer.android.google.cn/guide/topics/ui/look-and-feel/themes.html#Customize</a><br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hell，大家好！今天是周末，不知道大家是和好友聚聚会还是去外面逛逛，又或是读上一两本好书，不管怎样，希望大家有一个愉快的周末。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;今天来和大家聊聊 Android 开发中的 Theme 和 Style，不知道大家是否和我一样，在刚刚学习 Android 那会，经常很迷惑，它们究竟是什么，之间又有什么关系？那好，我也在这里做个简单的介绍，希望起到一个抛砖引玉的效果（其实是我太菜，嘿嘿！）。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://Binshao.site/categories/Android/"/>
    
    
      <category term="Android 主题和样式" scheme="http://Binshao.site/tags/Android-%E4%B8%BB%E9%A2%98%E5%92%8C%E6%A0%B7%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>浅谈事件分发机制</title>
    <link href="http://Binshao.site/2018/03/09/dispatch/"/>
    <id>http://Binshao.site/2018/03/09/dispatch/</id>
    <published>2018-03-09T14:45:27.000Z</published>
    <updated>2018-09-16T15:05:48.632Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hello，大家好！今天广州的天气真好，暖洋洋的，好适合出去玩玩出去走走。哈哈，毕竟老是待在电脑前也不是很好，其实我挺想去云南玩的，觉得那里真的好美！有机会，一定去！</p></blockquote><a id="more"></a><p><div align="center"><img src="http://wx4.sinaimg.cn/mw690/0060lm7Tly1fvbpreg5gmj31hc0u0wmi.jpg" alt=""></div></p><h2 id="什么是事件分发"><a href="#什么是事件分发" class="headerlink" title="什么是事件分发"></a>什么是事件分发</h2><p>&emsp;&emsp;今天简单总结下事件分发机制，主要是了解事件的分发、拦截、以及处理事件的流程。在我们学习的时候，最好先对整体流程有一个大致的了解后，我们再去深入学习分发机制，这样就不好学得一头雾水，摸不着头脑！</p><p>&emsp;&emsp;了解事件之前，首先我们要知道触摸事件，一般为按下、滑动、抬起，这个想必大家都很清楚，而 Android 为这些触摸事件封装了个类 MotionEvent, 我们可以通过它去获取触摸点的坐标，或者去获得点击的事件类型，通过不同的 Action 实现不同的逻辑。我们都知道 View 可以放在 ViewGroup 里面，而 ViewGroup 又可以嵌套在另一个 ViewGroup 中，这时候问题就来了，我们的触摸事件到底要给谁处理，是给子 View 还是 父辈 ViewGroup？而事件分发其实就是这个 MotionEvent 事件的分发过程，当事件产生之后，需要把这个事件交给具体的一个 View 进行处理，而这个交付过程就是分发过程。<br><br></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>&emsp;&emsp;这里我们可以联想一下生活中的常见场景，平时上班中，经理把个任务交给下属组长去办，而组长又把这个任务交给了我。当我奋力加班终于把任务完成后，就把完成结果交给了组长，组长又把任务完成结果交给了经理，这样一个任务顺利完成，到最后你发现，领导照样活的滋润，你还是你，苦逼！</p><p>&emsp;&emsp;通过上面这个例子是否更加了解整个过程呢？接下来继续说，事件的分发过程由三个方法完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Binshao"</span>, <span class="string">"ViewGroupA dispatchTouchEvent"</span> + ev.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"Binshao"</span>, <span class="string">"ViewGroupA onInterceptTouchEvent"</span> + ev.getAction());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">       Log.d(<span class="string">"Binshao"</span>, <span class="string">"ViewGroupA onTouchEvent"</span> + event.getAction());</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>下面来介绍一下这三个方法：</p><ul><li><p>public boolean dispatchTouchEvent(MotionEvent ev)<br>  这个方法是用来进行事件分发的，事件如果传递给当前 View，方法会被调用.</p></li><li><p>public boolean onInterceptTouchEvent(MotionEvent ev)<br>  在上面的方法内部调用，是用来判断是否拦截事件，它的返回值为 True 不继续流程；默认为 False，不拦截继续流程.</p></li><li><p>public boolean onTouchEvent(MotionEvent event)<br>  用来处理点击事件，返回结果表示是否消耗当前事件.<br><br></p></li></ul><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>&emsp;&emsp;光说不练假把式，这里上个简单演示，验证我们的结论：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">com.example.binshao.testdemo1.MyViewGroupA</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:background</span>=<span class="string">"@android:color/holo_blue_bright"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.example.binshao.testdemo1.MyViewGroupB</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"300dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@android:color/holo_green_dark"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">com.example.binshao.testdemo1.MyView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"150dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">"@android:color/darker_gray"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">com.example.binshao.testdemo1.MyViewGroupB</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.example.binshao.testdemo1.MyViewGroupA</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;这里直接就上布局文件了，自定义 View 和 ViewGroup 代码就不上了，非常简单，下面我们来看看日志打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">E/Binshao: ViewGroupA dispatchTouchEvent0</span><br><span class="line">E/Binshao: ViewGroupA onInterceptTouchEvent0</span><br><span class="line">E/Binshao: ViewGroupB dispatchTouchEvent0</span><br><span class="line">E/Binshao: ViewGroupB onInterceptTouchEvent0</span><br><span class="line">E/Binshao: View dispatchTouchEvent0</span><br><span class="line">E/Binshao: View onTouchEvent0</span><br><span class="line">E/Binshao: ViewGroupB onTouchEvent0</span><br><span class="line">E/Binshao: ViewGroupA onTouchEvent0</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;果然结果和我们分析的一样。</p><p>&emsp;&emsp;当一个事件产生后，首先会传递给根 ViewGroup，这时 dispatchTouchEvent 就会被调用，此时如果当前 ViewGroup 的 onInterceptTouchEvent 方法返回值为 true 就表示它要拦截当前事件，如果为 false 就表示不拦截当前事件，这时候事件就会继续传递到它的子元素，接着子元素就会像上面说的一样，如此重复直到事件被处理。假如所有的元素都不处理这个事件，那么这个事件最终传递给 Activity 处理，也就是它的 onTouchEvent 方法会被调用。<br><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><br></p><ul><li><p>ViewGroup 默认不拦截事件，它的 onInterceptTouchEvent 方法默认返回 false.</p></li><li><p>View 是没有 onInterceptTouchEvent 方法，一旦有事件传递给它，它的 onTouchEvent 方法就会被调用.</p></li><li><p>事件传递过程是由外向内的，也就是先传递给父元素，再由父元素分发给子元素.</p></li></ul><p><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hello，大家好！今天广州的天气真好，暖洋洋的，好适合出去玩玩出去走走。哈哈，毕竟老是待在电脑前也不是很好，其实我挺想去云南玩的，觉得那里真的好美！有机会，一定去！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://Binshao.site/categories/Android/"/>
    
    
      <category term="事件分发" scheme="http://Binshao.site/tags/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android 自定义属性</title>
    <link href="http://Binshao.site/2018/03/08/AttributeSet/"/>
    <id>http://Binshao.site/2018/03/08/AttributeSet/</id>
    <published>2018-03-08T13:42:42.000Z</published>
    <updated>2018-09-16T14:50:50.901Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hello，大家好！今天总结一篇自定义属性的文章，很久之前就想要总结了，懒……对了今天还是三月八日，祝各位小仙女女神节快乐！</p></blockquote><a id="more"></a><p><div align="center"><img src="http://wx3.sinaimg.cn/mw690/0060lm7Tly1fvbrbhfdfcj30dw0k6tbc.jpg" alt=""></div></p><h2 id="自定义属性流程"><a href="#自定义属性流程" class="headerlink" title="自定义属性流程"></a>自定义属性流程</h2><p>&emsp;&emsp;对于自定义属性，大家肯定都已经滚瓜烂熟了（看来是我太菜了），主要是以下几步：</p><pre><code>*  自定义一个类继承自 View 类.*  在 values 目录下新建 XML 文件并编写标签元素.*  在自定义类布局文件中使用自定义属性.*  在自定义类中的构造方法通过 TypedArray 获取自定义属性.</code></pre><p>下面贴出代码演示下流程：</p><ol><li>自定义属性文件：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"number"</span> <span class="attr">format</span>=<span class="string">"integer"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">format</span>=<span class="string">"string"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>自定义 View 类并获取自定义属性：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MCustomView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Binshao"</span>;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">MCustomView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">super</span>(context, attrs);</span><br><span class="line">         TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.test);</span><br><span class="line">         <span class="keyword">int</span> num = ta.getString(R.styleable.test_number, <span class="number">0</span>);</span><br><span class="line">         String text = ta.getInteger(R.styleable.test_text);</span><br><span class="line">         Log.e(TAG, <span class="string">"num = "</span> + num + <span class="string">" , text = "</span> + text);</span><br><span class="line">         <span class="comment">//  记得回收资源</span></span><br><span class="line">        ta.recycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>布局文件中就可以使用我们的自定义属性：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"> <span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:binshao</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">tools:context</span>=<span class="string">"com.example.binshao.testdemo1.MCustomView"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="tag">&lt;<span class="name">com.example.binshao.testdemo1.MCustomView</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">binshao:number</span>=<span class="string">"1339"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">binshao:text</span>=<span class="string">"十三"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;好了，接下来我们看一下日志打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">03-08 14:14:30.385 13084-13084/com.example.binshao.testdemo1 E/Binshao: num = 1339 , text = 十三</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;到这里我们自定义属性流程就完成了，你以为就结束了？ No，通过网上搜索鸿神博客，构造方法中的参数 AttributeSet 也能获取我们的自定义属性，那我们要怎么获取呢？下面贴出代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MCustomView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Binshao"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MCustomView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        <span class="keyword">int</span> attrsCount = attrs.getAttributeCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; attrsCount; i++) &#123;</span><br><span class="line">            String attrNum = attrs.getAttributeName(i);</span><br><span class="line">            String attrText = attrs.getAttributeValue(i);</span><br><span class="line">            Log.e(TAG, <span class="string">"num = "</span> + attrNum + <span class="string">" , text = "</span> + attrText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>日志打印结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">03-08 14:31:03.750 17331-17331/? E/Binshao: num = number , text = 1339</span><br><span class="line">203-08 14:31:03.750 17331-17331/? E/Binshao: num = text , text = 十三</span><br></pre></td></tr></table></figure><p><br></p><h2 id="关于-AttributeSet-与-TypedArray"><a href="#关于-AttributeSet-与-TypedArray" class="headerlink" title="关于 AttributeSet 与 TypedArray"></a>关于 AttributeSet 与 TypedArray</h2><p>&emsp;&emsp;那么问题来了，既然 AttributeSet 也能获取所有自定义属性，那么我们还要 TypedArray 干嘛呢？其实 TypedArray 其实可以帮助我们简化工作，如果我们使用 AttributeSet 去获取自定义属性，首先需要获取 id，其次再去进行解析，比较麻烦！而我们的 TypedArray 正是简化这一过程！</p><p>&emsp;&emsp;好了，今天就总结到这里了，最后我贴出鸿神博客地址，那里更加详细：<a href="http://blog.csdn.net/lmj623565791/article/details/45022631/" target="_blank" rel="noopener">http://blog.csdn.net/lmj623565791/article/details/45022631/</a><br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hello，大家好！今天总结一篇自定义属性的文章，很久之前就想要总结了，懒……对了今天还是三月八日，祝各位小仙女女神节快乐！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://Binshao.site/categories/Android/"/>
    
    
      <category term="Android 自定义属性" scheme="http://Binshao.site/tags/Android-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>SurfaceView</title>
    <link href="http://Binshao.site/2018/03/07/SurfaceView/"/>
    <id>http://Binshao.site/2018/03/07/SurfaceView/</id>
    <published>2018-03-07T10:47:39.000Z</published>
    <updated>2018-09-16T14:43:51.467Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这几天让我感觉春天来了！到处散发着“春”（荷尔蒙）的气息？（微笑脸）<br>最近项目需要用到 SurfaceView，发现很久没有写 SurfaceView，什么都忘记了！真是好记性不如烂笔头，记录下吧！</p></blockquote><a id="more"></a><p><div align="center"><img src="http://wx1.sinaimg.cn/mw690/0060lm7Tly1fvbrhq8m8zj30u00gutfs.jpg" alt=""></div></p><h2 id="关于-SurfaceView"><a href="#关于-SurfaceView" class="headerlink" title="关于 SurfaceView"></a>关于 SurfaceView</h2><p>&emsp;&emsp;首先我们发现 SurfaceView 继承自 View，我们都知道 Android 系统提供了 View 让开发者进行绘图处理，那么这个 SurfaceView 又是用来干什么的呢？它和 View 之间又有什么爱恨情仇呢？别急！喝杯茶，且听我娓娓道来。  </p><p>View 的确可以进行绘图处理，但在某些情况下也有些心有余而力不足（才美不外现？），Android 系统通过发出信号对屏幕进行重新绘制，刷新页面间隔为 16 ms，在这段时间内，View 如果执行完成刷新页面操作，页面在视觉上就不会产生卡顿的现象，执行逻辑不多还好，任务一多，如需要频繁刷新页面，特别是 View 在主线程中更新 UI 界面，就会造成主线程阻塞、画面卡顿。你说那可怎么办才好？这不，Android 系统就提供了 SurfaceView 来解决这个问题！<br><br></p><h2 id="区别及使用场景"><a href="#区别及使用场景" class="headerlink" title="区别及使用场景"></a>区别及使用场景</h2><ul><li>SurfaceView 通过子线程中进行画面更新，View 则在主线程中进行画面更新。</li><li>SurfaceView 用于被动更新，如频繁画面更新，View 则用于主动更新，如触摸点击等事件响应等。</li><li>SurfaceView 在底层实现了双缓冲机制，效率大大提升了，View 则没有。</li></ul><p>那么什么时候使用 SurfaceView？<br>&emsp;&emsp;如果当前画面需要不停绘制或者数据处理量较大时，为避免 UI 线程堵塞，就用 SurfaceView 代替 View。<br><br></p><h2 id="光说不练假把式"><a href="#光说不练假把式" class="headerlink" title="光说不练假把式"></a>光说不练假把式</h2><p>&emsp;&emsp;编写 SurfaceView 是可以套用模板代码的，这里贴一下模板代码，然后我们这里面编写相应的逻辑即可！  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SurfaceViewTemplate</span> <span class="keyword">extends</span> <span class="title">SurfaceView</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">         <span class="title">SurfaceHolder</span>.<span class="title">Callback</span>, <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// SurfaceHolder</span></span><br><span class="line">    <span class="keyword">private</span> SurfaceHolder mHolder;</span><br><span class="line">    <span class="comment">// 用于绘图的Canvas</span></span><br><span class="line">    <span class="keyword">private</span> Canvas mCanvas;</span><br><span class="line">    <span class="comment">// 子线程开启标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsRunning;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SurfaceViewTemplate</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SurfaceViewTemplate</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SurfaceViewTemplate</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</span><br><span class="line">        initView();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mHolder = getHolder();</span><br><span class="line">        mHolder.addCallback(<span class="keyword">this</span>);</span><br><span class="line">        setFocusable(<span class="keyword">true</span>);</span><br><span class="line">        setFocusableInTouchMode(<span class="keyword">true</span>);</span><br><span class="line">        setKeepScreenOn(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceCreated</span><span class="params">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class="line">        mIsRunning = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceChanged</span><span class="params">(SurfaceHolder holder,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">int</span> format, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceDestroyed</span><span class="params">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class="line">        mIsRunning = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (mIsRunning) &#123;</span><br><span class="line">            draw();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mCanvas = mHolder.lockCanvas();</span><br><span class="line">            <span class="comment">// 在这里编写绘制逻辑</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCanvas != <span class="keyword">null</span>)</span><br><span class="line">                mHolder.unlockCanvasAndPost(mCanvas);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;可以看到我们首先创建个模板继承自 SurfaceView，分别实现 SurfaceHolder.Callback 和 Runnable 这两个接口并实现接口里的方法，然后初始化 SurfaceHolder以及注册 SurfaceHolder的回调方法。和 View 一样，成员变量 Canvas 也是用来给 SurfaceView 进行绘图的，而布尔类型的 mIsRunning 则是用来控制子线程的，因为 SurfaceView 会在子线程中进行绘制操作。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SurfaceView 的创建</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceCreated</span><span class="params">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class="line">       mIsDrawing = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// SurfaceView 的改变</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceChanged</span><span class="params">(SurfaceHolder holder,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> format, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// SurfaceView 的销毁</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">surfaceDestroyed</span><span class="params">(SurfaceHolder holder)</span> </span>&#123;</span><br><span class="line">       mIsDrawing = <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><div align="center" style="color: red; font-size: 13px;">实现 SurfaceHolder.Callback 接口的方法</div></p><p>&emsp;&emsp;绘制时，利用上图三个回调方法，在 surfaceCreated()方法开启子线程进行绘制操作，子线程中则使用 while 循环进行画面绘制，而绘制逻辑中通过 lockCanvas()方法获得 Canvas 对象去绘制对象，绘制完成后，最后通过 unlockCanvasAndPost(mCanvas)方法提交内容。</p><p>&emsp;&emsp;到这里整个模板代码就完成了，我们编写 SurfaceView 只需要套用模板，在里面编写相应的逻辑就可以了！<br><br><br><br></p><hr><p><div align="center"><img src="http://wx2.sinaimg.cn/mw690/0060lm7Tly1fvbqgfo4lwj303l03lmx8.jpg" alt="扫一扫点击关注"><br>十三的记事本<br>欢迎大家关注我的公众号</div></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这几天让我感觉春天来了！到处散发着“春”（荷尔蒙）的气息？（微笑脸）&lt;br&gt;最近项目需要用到 SurfaceView，发现很久没有写 SurfaceView，什么都忘记了！真是好记性不如烂笔头，记录下吧！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://Binshao.site/categories/Android/"/>
    
    
      <category term="SurfaceView" scheme="http://Binshao.site/tags/SurfaceView/"/>
    
  </entry>
  
</feed>
